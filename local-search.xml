<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>UKB中rs-fMRI预处理指南（一）</title>
    <link href="/2025/05/09/UKB%E4%B8%ADrs-fMRI%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E5%8D%97/"/>
    <url>/2025/05/09/UKB%E4%B8%ADrs-fMRI%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h3 id="数据介绍"><a href="#数据介绍" class="headerlink" title="数据介绍"></a>数据介绍</h3><p>依据UK Biobank官方mri数据介绍文件：<a href="https://biobank.ctsu.ox.ac.uk/crystal/crystal/docs/brain_mri.pdf">brain_mri.pdf</a>：</p><p><img src="/../image/UKB%E4%B8%ADrs-fMRI%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E5%8D%97/image-20250509171713847.png" alt="image-20250509171713847"></p><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><p>下面图片中文字来自于上述文件，是对英国生物银行 (UK Biobank) 项目中静息态功能性磁共振成像 (Resting-state functional MRI, rsfMRI) 采集参数和相关参考扫描的详细说明。</p><p><img src="/../image/UKB%E4%B8%ADrs-fMRI%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E5%8D%97/image-20250509171837507.png" alt="image-20250509171837507"></p><p>以下是各项参数的解释：</p><ul><li><p><strong><code>Resolution: 2.4x2.4x2.4 mm</code></strong></p><ul><li><strong>含义：</strong> 图像的空间分辨率。这意味着每个体素 (voxel，图像中的最小三维单位) 的大小是 2.4 mm×2.4 mm×2.4 mm。这是各向同性 (isotropic) 体素，即在所有三个维度上的分辨率都相同。</li></ul></li><li><p><strong><code>Field-of-view: 88x88x64 matrix</code></strong></p><ul><li><p>含义：</p><p> 视野 (Field-of-view, FOV) 和矩阵大小。</p><ul><li>这通常与分辨率结合起来理解。FOV指的是在每个维度上扫描覆盖的物理范围。这里的 “matrix” 指的是在每个维度上采集的数据点数（或体素数）。</li><li>例如，在相位编码方向和频率编码方向（通常是面内方向，in-plane），视野是 88 (体素)×2.4 mm&#x2F;体素&#x3D;211.2 mm。</li><li>在层面选择方向（slice direction），视野是 64 (体素&#x2F;层面数)×2.4 mm&#x2F;体素&#x3D;153.6 mm。所以这里有64个层面。</li></ul></li></ul></li><li><p><strong><code>Duration: 6 minutes (490 timepoints)</code></strong></p><ul><li><strong>含义：</strong> rsfMRI扫描的总持续时间是6分钟。</li><li>在这6分钟内，总共采集了490个时间点 (timepoints) 或称为脑体积 (volumes)。每个时间点都是一次全脑扫描。</li></ul></li><li><p><strong><code>TR: 0.735 s</code></strong></p><ul><li><strong>含义：</strong> 重复时间 (Repetition Time, TR)。这是采集一个完整脑体积所需的时间。这里是0.735秒。</li><li>可以验证一下：490 timepoints×0.735 s&#x2F;timepoint≈360 秒，即6分钟。这与上面的持续时间相符。</li></ul></li><li><p><strong><code>TE: 39ms</code></strong></p><ul><li><strong>含义：</strong> 回波时间 (Echo Time, TE)。这是射频脉冲激发后到信号被采集之间的时间。这里是39毫秒。对于3T扫描仪的BOLD fMRI（血氧水平依赖功能磁共振成像），这是一个典型的TE值，以获得对血氧变化的良好敏感性。</li></ul></li><li><p><strong><code>GE-EPI with x8 multislice acceleration, no iPAT, flip angle 52°, fat saturation</code></strong></p><ul><li><p>含义：</p><p> 这是关于扫描序列和技术的详细描述：</p><ul><li><strong><code>GE-EPI</code></strong>: 梯度回波平面成像 (Gradient-Echo Echo-Planar Imaging)。这是fMRI常用的快速成像序列。</li><li><strong><code>with x8 multislice acceleration</code></strong>: 使用了8倍的多层面加速技术。这通常指的是<strong>多带 (Multiband, MB) 技术</strong>，允许同时激发和采集8个层面，从而大大缩短了TR。</li><li><strong><code>no iPAT</code></strong>: 没有使用iPAT (integrated Parallel Acquisition Techniques，集成的并行采集技术，是西门子对并行成像技术的称呼，如GRAPPA或SENSE类技术)。这意味着加速主要依赖于多带技术，而不是面内的并行成像加速。</li><li><strong><code>flip angle 52°</code></strong>: 翻转角是52度。这是射频脉冲将组织的净磁化矢量翻转的角度。这个角度通常针对特定的TR和组织特性进行优化，以最大化BOLD信号。</li><li><strong><code>fat saturation</code></strong>: 使用了脂肪抑制技术。这有助于消除由身体其他部位（如头皮）的脂肪信号引起的伪影，提高脑部图像的质量。</li></ul></li></ul></li><li><p><strong><code>As implemented in the CMRR multiband acquisition, a separate &quot;single-band reference scan&quot; is also acquired. This has the same geometry (including EPI distortion) as the timeseries data, but has higher between-tissue contrast to noise, and is used as the reference scan in head motion correction and alignment to other modalities.</code></strong></p><ul><li><p>含义：</p><p> 这段话解释了除了主要的rsfMRI时间序列数据外，还会采集一个额外的参考扫描。</p><ul><li><p><strong><code>CMRR multiband acquisition</code></strong>: 指的是由CMRR (Center for Magnetic Resonance Research, University of Minnesota) 开发的多带采集序列，这是UK Biobank所使用的。</p></li><li><p><strong><code>separate &quot;single-band reference scan&quot; (SBRef)</code></strong>: 会额外采集一个单带参考扫描（没有多带加速）。</p></li><li><p><strong><code>same geometry (including EPI distortion) as the timeseries data</code></strong>: 这个SBRef图像具有与主要fMRI时间序列数据相同的几何形状和空间畸变特性（由EPI序列的磁敏感性伪影引起）。这一点很重要，因为它使得SBRef可以很好地与fMRI数据对齐。</p></li><li><p><strong><code>higher between-tissue contrast to noise</code></strong>: 相比于快速采集的多带fMRI数据，SBRef图像具有更高的组织间对比度和信噪比。这使得脑组织结构（如灰质和白质的边界）更清晰。</p></li><li><p><code>used as the reference scan in head motion correction and alignment to other modalities</code></p><p>: 这个高质量的SBRef图像主要用于以下目的：</p><ul><li><strong>头部运动校正</strong>：作为fMRI时间序列数据进行运动校正时的参考图像。</li><li><strong>与其他模态对齐</strong>：帮助将fMRI数据与结构像（如T1加权像）或其他模态的图像进行配准对齐。因为它的对比度比单个fMRI时间点更好，所以配准效果也更好。</li></ul></li></ul></li></ul></li></ul><p>总结来说，这段文字描述了一个先进的、快速的rsfMRI采集方案，使用了<strong>多带加速技术</strong>以实现短TR，从而获得较高的时间分辨率。同时，通过采集一个高质量的单带参考图像（SBRef）来辅助后续的数据处理，特别是运动校正和图像配准，以提高整体数据质量和分析的准确性。这些都是UK Biobank项目中为了获取高质量大规模脑成像数据所采用的关键技术。</p><hr><p><strong>注意到</strong>：数据采用了<strong>多带加速技术</strong>，该技术可以同时激发多个层面，以缩短扫面时间，但是博主之前预处理的数据一般是传统的 <strong>“sequential” (顺序采集)</strong> 或 <strong>“interleaved” (隔层采集)</strong> ，因此如何进行时间层的校正为博主考虑的首要问题。</p><hr><h4 id="数据参数"><a href="#数据参数" class="headerlink" title="数据参数"></a>数据参数</h4><p>查看.nii数据参数列表：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;Manufacturer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Siemens&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ManufacturersModelName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Skyra&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ImageType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;ORIGINAL&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;PRIMARY&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;M&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;MB&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;ND&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;MOSAI&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;AcquisitionTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">170638.635000</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;AcquisitionDate&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20180523</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;MagneticFieldStrength&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;FlipAngle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">51</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;EchoTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.0424</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;RepetitionTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.735</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;EffectiveEchoSpacing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.000639989</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;SliceTiming&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.2675</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.535</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.0875</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.3575</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.625</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.1775</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.445</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.2675</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.535</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.0875</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.3575</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.625</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.1775</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.445</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.2675</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.535</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.0875</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.3575</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.625</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.1775</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.445</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.2675</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.535</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.0875</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.3575</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.625</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.1775</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.445</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.2675</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.535</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.0875</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.3575</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.625</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.1775</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.445</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.2675</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.535</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.0875</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.3575</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.625</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.1775</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.445</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.2675</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.535</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.0875</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.3575</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.625</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.1775</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.445</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.2675</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.535</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.0875</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.3575</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.625</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.1775</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.445</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;PhaseEncodingDirection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;j-&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>下面是每个参数的解释：</p><ul><li><p><strong><code>Manufacturer</code></strong>: “Siemens”</p><ul><li><strong>含义</strong>: 指MRI扫描仪的制造商是西门子公司。</li></ul></li><li><p><strong><code>ManufacturersModelName</code></strong>: “Skyra”</p><ul><li><strong>含义</strong>: 指西门子公司制造的MRI扫描仪的具体型号是Skyra。这是一款常见的3特斯拉MRI扫描仪。</li></ul></li><li><p><strong><code>ImageType</code></strong>: <code>[&quot;ORIGINAL&quot;, &quot;PRIMARY&quot;, &quot;M&quot;, &quot;MB&quot;, &quot;ND&quot;, &quot;MOSAIC&quot;]</code></p><ul><li><p>含义</p><p>: 这是一个数组，描述了图像的多个特性：</p><ul><li><strong><code>ORIGINAL</code></strong>: 表示这是原始采集的数据，未经过重要修改或二次处理。</li><li><strong><code>PRIMARY</code></strong>: 表示这是主要的、首要的图像系列，而不是例如衍生的或计算出的图像（如参数图）。</li><li><strong><code>M</code></strong>: 通常指“Magnitude”（幅度图像）。在复数MRI信号中，幅度和相位图像都可以生成，幅度图像是最常用的。</li><li><strong><code>MB</code></strong>: 代表“Multi-Band”（多带技术）。这是一种加速fMRI采集的技术，允许同时激发和采集多个脑片（slices）的数据，从而显著缩短每个全脑容积的采集时间（TR）。</li><li><strong><code>ND</code></strong>: 通常代表“No Distortion Correction”（未进行畸变校正）或在某些情况下可能指“Normalized”（归一化）。在BIDS上下文中，如果图像已经过畸变校正，通常会有特定的字段或文件名来指明。考虑到这是原始数据参数，”No Distortion Correction” 更为可能，意味着这些是原始采集的、可能存在磁敏感伪影导致几何畸变的图像。</li><li><strong><code>MOSAIC</code></strong>: 表示图像数据在存储时是以“马赛克”格式排列的。在这种格式中，一个二维图像文件实际上包含了多个脑片拼接在一起形成一个大的二维阵列。现代处理软件通常会自动处理这种格式。</li></ul></li></ul></li><li><p><strong><code>AcquisitionTime</code></strong>: <code>100156.227500</code></p><ul><li><strong>含义</strong>: 数据采集开始的时间。格式通常是 <code>HHMMSS.fractional_seconds</code>。所以，这里表示采集开始于上午10点01分56.227500秒。</li></ul></li><li><p><strong><code>AcquisitionDate</code></strong>: <code>20180306</code></p><ul><li><strong>含义</strong>: 数据采集的日期。格式是 <code>YYYYMMDD</code>。所以，这里表示采集日期是2018年3月6日。</li></ul></li><li><p><strong><code>MagneticFieldStrength</code></strong>: <code>3</code></p><ul><li><strong>含义</strong>: MRI扫描仪主磁场的强度，单位是特斯拉 (Tesla, T)。这里是3T，是神经影像研究中常用的场强。</li></ul></li><li><p><strong><code>FlipAngle</code></strong>: <code>51</code></p><ul><li><strong>含义</strong>: 翻转角，单位是度 (°)。这是射频脉冲将质子从纵向磁化方向翻转的角度。对于梯度回波序列（fMRI常用），这个角度的选择会影响图像对比度和信噪比。51度是一个针对特定TR和组织类型优化过的值，以获得较好的BOLD信号。</li></ul></li><li><p><strong><code>EchoTime</code> (TE)</strong>: <code>0.0424</code></p><ul><li><strong>含义</strong>: 回波时间，单位是秒 (s)，所以这里是42.4毫秒 (ms)。TE是指射频激发脉冲中心到回波信号峰值中心之间的时间。对于BOLD fMRI，TE的选择对血氧效应的敏感性至关重要，3T下通常在25-45ms之间。</li></ul></li><li><p><strong><code>RepetitionTime</code> (TR)</strong>: <code>0.735</code></p><ul><li><strong>含义</strong>: 重复时间，单位是秒 (s)，所以这里是735毫秒 (ms)。TR是指在序列中连续两次激发相同脑片之间的时间间隔，也即采集一个完整脑体积数据所需的时间。0.735s是一个非常快的TR，这得益于上面提到的多带技术 (MB)。</li></ul></li><li><p><strong><code>EffectiveEchoSpacing</code></strong>: <code>0.000639989</code></p><ul><li><strong>含义</strong>: 有效回波间距，单位是秒 (s)，所以这里是0.639989毫秒 (ms)。这个参数在EPI (Echo Planar Imaging) 序列中非常重要，它表示在k空间中采集相邻相位编码线之间的时间。它与图像的带宽、几何畸变程度以及用于畸变校正的计算有关。</li></ul></li><li><p><strong><code>SliceTiming</code></strong>: <code>[0, 0.2675, 0.5375, ... , 0.4475]</code> (列表很长)</p><ul><li><p>含义</p><p>: 这是一个数组，列出了每个脑片 (slice) 相对于TR开始时刻的实际采集时间点，单位是秒 (s)。</p><ul><li>这些数值对于进行“层时间校正”（Slice Timing Correction）非常关键，因为fMRI中一个脑体积内的不同脑片不是完全同时采集的。</li><li>列表中数值的模式可以揭示脑片的采集顺序（例如，顺序采集、升序或降序的交错采集、多带交错采集）。注意到列表中有多个0，并且数值在0到接近TR (0.735s)但小于TR的一个较小值 (0.625s) 之间重复出现，这进一步证实了多带采集的使用。例如，多个脑片可能在时间点0被同时采集，然后下一组脑片在0.09s被同时采集，以此类推。具体来说，相同的采集时间点重复出现的次数暗示了多带因子（即同时采集的slice数量）。在这个例子中，0, 0.09, 0.18, 0.2675, 0.3575, 0.4475, 0.5375, 0.625 可能是8个不同的采集时间点，如果每个时间点对应多个slice，例如每个时间点采集6个slice，那么这个序列可能是一个MB因子为6，8个slice “包” (slice groups or bands) 的采集序列。</li></ul></li></ul></li><li><p><strong><code>PhaseEncodingDirection</code></strong>: <code>&quot;j-&quot;</code></p><ul><li><p>含义: 相位编码方向。在MRI中，图像的空间编码在三个逻辑方向上进行：层面选择 (slice selection)、频率编码 (frequency encoding) 和相位编码 (phase encoding)。相位编码方向是图像中最容易受到磁敏感伪影、运动伪影和化学位移伪影影响的方向。</p><ul><li><code>&quot;j-&quot;</code> 通常表示在BIDS规范中，相位编码方向是沿着Y轴的负方向。在典型的头颅成像中，这通常对应于<strong>后-&gt;前 (Posterior-to-Anterior, P&gt;&gt;A)</strong> 的方向。了解这个信息对于畸变校正（例如使用反向相位编码方向的“blip-up&#x2F;blip-down”技术）非常重要。</li></ul></li></ul></li></ul><p>总结来说，这些参数表明这是一次在西门子Skyra 3T扫描仪上进行的、使用了<strong>多带技术</strong>的快速静息态fMRI扫描，采集日期是2018年3月6日，相位编码方向为Y轴负方向。<code>SliceTiming</code> 提供了进行精确的层时间校正所需的信息。这些都是进行fMRI数据预处理和分析时的关键参数。</p><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>&#x3D;&#x3D;<em><strong>所以，多带采集在dpabi中怎么进行时间层校正？</strong></em>&#x3D;&#x3D;</p><p>现在对在DPABI中为多带采集 (Multi-Band) 的rsfMRI数据进行时间层校正 (Slice Timing Correction, STC) 的步骤总结：</p><ol><li><p><strong>准备关键信息 (Preprocessing Preparation):</strong></p><ul><li><code>SliceTiming</code> 数组: 这是最重要的信息。从与fMRI数据 (<code>.nii</code>或&#96;&#96;&#96;</li></ul></li></ol><p>.nii.gz<code>) 配套的JSON文件 (</code>_bold.json<code>) 中找到并复制完整的</code>SliceTiming&#96;&#96;&#96;数组。这个数组精确定义了每个层面相对于TR开始的采集时间（单位：秒），其顺序与NIfTI图像中层面的存储顺序一致。</p><ul><li><em>例如，提供的包含64个时间值的数组。</em><ul><li><code>TR</code> (Repetition Time, 重复时间)<br>: 明确扫描TR值（单位：秒）。<ul><li><em>例如，0.735秒。</em></li></ul></li><li><code>Number of Slices</code> (层面数量)<br>: 明确fMRI图像包含的总层面数。<ul><li><em>例如，64个层面。</em></li></ul></li></ul></li></ul><ol start="2"><li><p><strong>在DPABI中配置时间层校正参数:</strong></p><ul><li><strong>启动DPABI</strong> 并进入相应的预处理流程配置界面（如DPARSF的基础预处理流程，或DPABISurf的相关模块）。</li><li>找到**“Slice Timing”** (或类似名称，如“层时间校正”、“Time Course Correction”) 的设置部分。</li><li>设置以下参数：<ul><li><strong><code>Number of Slices</code> (层面数量)</strong>: 确保DPABI识别的层面数与数据一致 (例如，64)。通常DPABI会自动从图像头文件读取。</li><li><strong><code>TR (s)</code> (重复时间，秒)</strong>: 确保TR值设置正确 (例如，0.735)。通常DPABI也会自动读取。</li><li><code>Slice Order</code> &#x2F; <code>Slice timing (vector in s)</code> (层面顺序 &#x2F; 层面时间向量，秒):<ul><li>这是<strong>最关键</strong>的一步。对于多带数据，<strong>不要选择</strong> “sequential” (顺序) 或 “interleaved” (隔层) 等预设选项(dpabi没有)。</li><li>需要选择一个允许<strong>手动输入或加载自定义层面时间向量</strong>的选项 (例如，”User-defined Slice Order”, “Custom”, 或直接粘贴数值的输入框)。</li><li>将步骤1中准备好的<strong>完整<code>SliceTiming</code>数组</strong>（确保是秒为单位，并且数值顺序正确）输入到此处。DPABI可能允许直接粘贴空格或逗号分隔的数值，或者加载一个包含这些数值的文本文件。</li></ul></li><li><code>Reference Slice</code> (参考层面) &#x2F; <code>Reference Time (s)</code> (参考时间，秒):<ul><li>这是我们希望将所有其他层面校正到的时间点。</li><li>一个常用的方法是选择TR中间时刻采集的层面作为参考。计算 <code>TR / 2</code> (例如, 0.735s&#x2F;2&#x3D;0.3675s)。</li><li>查看<code>SliceTiming</code>数组中的独特采集时间点，找到最接近<code>TR/2</code>的那个时间值 (例如，在数据中，<code>0.3575s</code> 最接近 <code>0.3675s</code>)。</li><li>在DPABI中，可以通过指定<strong>参考层面的索引号</strong> (例如，在SliceTiming<code>数组中，第一个值为</code>0.3575s<code>的层面索引，通常从0或1开始计数，具体看DPABI的说明) 或直接输入**参考时间** (例如，</code>0.3575s&#96;，如果软件支持) 来设定参考层面。</li></ul></li></ul></li></ul></li><li><p><strong>执行校正:</strong></p><ul><li>仔细检查所有参数设置无误后，保存配置。</li><li>运行DPABI的预处理流程，时间层校正步骤将根据提供的精确层面时间信息进行。</li></ul></li></ol><p><strong>核心要点总结:</strong></p><ul><li>对于多带采集数据，<strong>必须使用从JSON文件获取的精确<code>SliceTiming</code>数组</strong>，而不是依赖简化的层面顺序假设。</li><li>在DPABI中，确保将此<code>SliceTiming</code>数组正确输入到允许自定义层面时间的选项中。</li><li>正确设置TR、层面数和选择一个合适的参考层面。</li></ul><p>通过以上步骤，DPABI就能够利用每个层面准确的采集时间信息，为多带rsfMRI数据执行有效的时间层校正。</p><h3 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h3><p>基于.nii数据参数列表：</p><p>这个<code>SliceTiming</code>数组以及提供的<code>RepetitionTime</code>和<code>EffectiveEchoSpacing</code>是进行时间层校正的关键参数。这个<code>SliceTiming</code>数组的模式与我们之前讨论的UK Biobank多带（Multi-Band, MB）数据非常相似，但数值上略有不同，这强调了<strong>始终使用与当前处理的特定扫描数据相对应的JSON文件中的确切<code>SliceTiming</code>值的重要性。</strong></p><p>让我们分析一下这个具体的数据：</p><ul><li><p><strong><code>&quot;RepetitionTime&quot;: 0.735</code></strong>: TR是0.735秒。</p></li><li><p><strong><code>&quot;EffectiveEchoSpacing&quot;: 0.000639989</code></strong>: 这个主要用于后续的畸变校正，不直接影响时间层校正的输入方式。</p></li><li><p><code>&quot;SliceTiming&quot;: [...]</code></p><p>:</p><ul><li><strong>长度</strong>: 数组包含64个值，对应64个层面。</li><li><strong>模式</strong>: 值 <code>0, 0.2675, 0.535, 0.0875, 0.3575, 0.625, 0.1775, 0.445</code> 在重复。</li><li><strong>多带信息</strong>: 这个重复的8个独特时间点模式表明这是一个**多带因子为8（MB&#x3D;8）**的采集序列。每个时间点同时采集了 64&#x2F;8&#x3D;8 个层面。</li><li><strong>TR兼容性</strong>: 数组中的最大时间值是 <code>0.625</code> 秒，这小于TR <code>0.735</code> 秒，是符合逻辑的。</li></ul></li></ul><p><strong>如何将这些参数输入到时间层校正中（例如在DPABI&#x2F;SPM中，参考spm截图信息）：</strong></p><ol><li><p><strong>准备信息：</strong></p><ul><li><strong>这个完整的 <code>SliceTiming</code> 数组</strong>（64个值，如上所示，单位：秒）。</li><li><strong><code>RepetitionTime</code> (TR)</strong>：<code>0.735</code> 秒。</li><li><strong>层面数量 (Number of Slices)</strong>：64。</li></ul></li><li><p><strong>在软件（如DPABI）中进行设置：</strong></p><ul><li><p><strong>打开时间层校正设置界面。</strong></p></li><li><p><strong>层面数量 (Number of Slices)</strong>：确保软件识别为 <code>64</code>。</p></li><li><p><strong>TR (Repetition Time)</strong>：确保软件设置为 <code>0.735</code> 秒。</p></li><li><p>层面顺序 (Slice Order) &#x2F; 层面时间向量 (Slice timing vector)：</p><ul><li><p>选择允许手动输入或加载自定义层面时间向量**的选项。</p></li><li><p>输入 <code>SliceTiming</code> 向量</p><p>：将提供的这64个时间值（</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>, <span class="hljs-number">0</span>.<span class="hljs-number">2675</span>, <span class="hljs-number">0</span>.<span class="hljs-number">535</span>, ... , <span class="hljs-number">0</span>.<span class="hljs-number">445</span><br></code></pre></td></tr></table></figure><p>）输入。</p><ul><li><p><strong>单位注意！</strong> 提供的<code>SliceTiming</code>数组是以**秒（s）<strong>为单位的。根据展示的截图 (<code>spm</code>)，软件（因为dpabi是通过调用spm的SliceTiming的函数进行校正的,SPM）在接受自定义层面时间向量时，可能期望以</strong>毫秒（ms）**为单位输入，并且参考时间也以毫秒为单位。如果软件界面明确要求毫秒，需要将<code>SliceTiming</code>数组中的每个值乘以1000（例如，0s -&gt; 0ms; 0.2675s -&gt; 267.5ms; 0.535s -&gt; 535ms; 0.0875s -&gt; 87.5ms，以此类推）。</p><p><img src="/../image/UKB%E4%B8%ADrs-fMRI%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E5%8D%97/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250509220615.png" alt="spm"></p></li><li><p><strong>格式</strong>：确保数值的输入格式符合软件要求（例如，空格分隔的数值串，或者从文本文件加载）。</p></li></ul></li></ul></li><li><p>参考时间 (Reference Time &#x2F; Reference Slice)：</p><ul><li>根据截图 <code>spm</code> 的提示：”If doing so [输入每个层面的时间], the next item (Reference Slice) will contain a reference time (in ms) instead of the slice index of the reference slice.” 这意味着当提供了完整的层面时间向量后，软件会要求输入一个<strong>参考时间（以毫秒为单位）</strong>。</li><li>计算参考时间：<ol><li>TR的中间点是 0.735 秒&#x2F;2&#x3D;0.3675 秒。</li><li>查看这个<code>SliceTiming</code>数组中的独特采集时间点（排序后）：<code>0, 0.0875, 0.1775, 0.2675, 0.3575, 0.445, 0.535, 0.625</code>。</li><li>最接近 <code>0.3675</code> 秒的是 <code>0.3575</code> 秒。</li><li>因此，参考时间应该是 <code>0.3575</code> 秒。如果软件要求毫秒，则输入 <strong><code>357.5</code> ms</strong>。</li></ol></li></ul></li></ul></li></ol><p><strong>总结输入步骤：</strong></p><ol><li>在DPABI（或其他软件）的时间层校正模块中：</li><li>确认<strong>层面数量</strong>为 <code>64</code>。</li><li>确认<strong>TR</strong>为 <code>0.735</code> 秒。</li><li>选择“自定义层面时间向量”的输入方式。</li><li>将提供的包含64个值的<code>SliceTiming</code>数组**（注意根据软件要求可能需要从秒转换为毫秒）**输入。</li><li>在“参考时间 (Reference Time)”字段，输入 <code>357.5</code> （如果单位是毫秒），或者 <code>0.3575</code> （如果单位是秒，但这不符合之前截图的提示）。</li></ol><p>通过这种方式，就能利用这份精确的层面时间信息为这个多带fMRI数据进行准确的时间层校正了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【Hexo 指南】巧用 Typora 实现图片路径的优雅管理</title>
    <link href="/2025/05/08/%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E6%8C%87%E5%8D%97/"/>
    <url>/2025/05/08/%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>在 Hexo 博客的日常维护中，图片路径管理无疑是一项既重要又时常引发困扰的任务。如何在本地使用 Typora 流畅写作，同时确保 Hexo 生成站点时图片链接准确无误，是许多博主追求的目标。本文旨在提供一种清晰的思路和实战方法，利用 Typora 的特性，配合合理的 Hexo 图片组织方式，实现“一次配置，长久省心”的图片管理体验。</p><hr><h2 id="痛点回顾：Hexo-图片路径为何令人迷惑？"><a href="#痛点回顾：Hexo-图片路径为何令人迷惑？" class="headerlink" title="痛点回顾：Hexo 图片路径为何令人迷惑？"></a>痛点回顾：Hexo 图片路径为何令人迷惑？</h2><p>Hexo 提供了 <code>post_asset_folder: true</code> 的配置，允许将图片存放在与文章同名文件夹中，并通过相对路径引用。</p><p><img src="/../image/%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E6%8C%87%E5%8D%97/image-20250508205137298.png" alt="fig.1"></p><p>但是<code>hexo g</code>后，会发现，图片与由<code>.md</code>转化而来的<code>HTML</code>文件竟然在同一文件夹下，以至于原本设置好的相对路径无法使用，如图2：</p><p><img src="/../image/%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E6%8C%87%E5%8D%97/image-20250508211015878.png" alt="fig.2"></p><hr><p>笔者思索良久。。。。。。</p><hr><h2 id="思考过程"><a href="#思考过程" class="headerlink" title="思考过程"></a>思考过程</h2><p>在学习了市面上的相关资料，并且AI助手反复沟通效果甚微后，灵光乍现💡：</p><p>由于笔者此前一直使用typora软件进行<code>md</code>笔记书写，而typora软件可以自行定义：</p><ol><li><p>图片是否复制；</p></li><li><p>图片复制路径；</p><p>如图3：</p></li></ol><p><img src="/../image/%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E6%8C%87%E5%8D%97/image-20250508211431308.png" alt="fig.3"></p><p>基于此前知识以及博主智慧，将typora路径功能进行发展，最终实现:</p><ol><li><p><code>md</code>文件名与图片文件夹一一对应;</p></li><li><p>一次设置，终生质保的快捷处理方式。</p></li></ol><hr><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><ol><li><p><code>post_asset_folder: false</code>无需进行创建；</p></li><li><p>在<code>source</code>目录下建立<code>image</code>用于存放图片文件夹；</p><p><img src="/../image/%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E6%8C%87%E5%8D%97/image-20250508212209100.png" alt="image-20250508212209100"></p></li><li><p>使用typora时，将图片偏好设置为：</p><p><img src="/../image/%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E6%8C%87%E5%8D%97/image-20250508211431308.png" alt="image-20250508211431308"></p></li><li><p>设置完成<code>hexo clean &amp; hexo g</code>后<code>public</code>文件夹中生成<code>image</code>文件。</p></li><li><p><code>hexo s</code>显示成功。</p></li></ol><hr>]]></content>
    
    
    <categories>
      
      <category>技术指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Hexo</tag>
      
      <tag>Typora</tag>
      
      <tag>图片管理</tag>
      
      <tag>路径优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UKB数据提取</title>
    <link href="/2025/05/07/UKB%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96/"/>
    <url>/2025/05/07/UKB%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h2 id="UKB数据提取"><a href="#UKB数据提取" class="headerlink" title="UKB数据提取"></a>UKB数据提取</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@415d37a2c97b:/opt/notebooks# <span class="hljs-built_in">cd</span> /mnt<br>root@415d37a2c97b:/mnt# <span class="hljs-built_in">cd</span> project<br>root@415d37a2c97b:/mnt/project# <span class="hljs-built_in">cd</span> *TA<br>root@415d37a2c97b:/opt/notebooks# <span class="hljs-built_in">cd</span> /mnt<br>root@415d37a2c97b:/mnt# <span class="hljs-built_in">cd</span> project<br>root@415d37a2c97b:/mnt/project# <span class="hljs-built_in">cd</span> *TA<br>root@415d37a2c97b:/opt/notebooks# <span class="hljs-built_in">cd</span> /mnt<br>root@415d37a2c97b:/mnt# <span class="hljs-built_in">cd</span> project<br>root@415d37a2c97b:/mnt/project# <span class="hljs-built_in">cd</span> *TA<br>root@415d37a2c97b:/mnt/project/GMV_DATA# <span class="hljs-built_in">cp</span> *.csv /opt/notebooks<br>root@415d37a2c97b:/mnt/project/GMV_DATA# <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入所需的库</span><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd  <span class="hljs-comment"># 用于读取表格数据</span><br><span class="hljs-keyword">import</span> os            <span class="hljs-comment"># 用于操作系统功能，如文件路径操作、遍历目录</span><br><span class="hljs-keyword">import</span> shutil        <span class="hljs-comment"># 用于文件操作，如复制文件</span><br><span class="hljs-keyword">import</span> sys           <span class="hljs-comment"># 用于系统相关功能，如退出脚本、标准错误输出</span><br><span class="hljs-keyword">import</span> math          <span class="hljs-comment"># 用于数学运算（如此处不需要，但有时可能有用）</span><br><br><span class="hljs-comment"># --- 配置设定 ---</span><br><br><span class="hljs-comment"># 1. 包含参与者ID和目标文件名的表格文件的路径</span><br><span class="hljs-comment">#    (请更新为您的表格文件的正确路径和名称)</span><br>participant_table_path = <span class="hljs-string">&#x27;Participant_table.csv&#x27;</span><br><br><span class="hljs-comment"># 2. 表格中包含目标 T1 .zip 文件名的列的名称</span><br><span class="hljs-comment">#    (请从您的表格文件 image_4b5fe0.jpg 中获取确切的列标题)</span><br><span class="hljs-comment">#    *** 请务必用您表格中确切的列名称更新此变量！ ***</span><br>filename_column = <span class="hljs-string">&#x27;T1 structural brain images - NIFTI | Instance 2&#x27;</span><br><br><span class="hljs-comment"># 3. 存放 T1 .zip 文件的基础源目录 (文件在其中的子文件夹内)</span><br>source_base_dir = <span class="hljs-string">&#x27;/mnt/project/Bulk/Brain MRI/T1/&#x27;</span><br><br><span class="hljs-comment"># 4. 您希望将找到的 .zip 文件复制到的 **基础** 目标目录</span><br><span class="hljs-comment">#    脚本会在此目录下创建 batch_001, batch_002 ... 等子文件夹</span><br>destination_base_dir = <span class="hljs-string">&#x27;./T1_NIFTI_Batched&#x27;</span> <span class="hljs-comment"># 修改基础目标目录名</span><br><br><span class="hljs-comment"># 5. 每个批次子文件夹中最多存放的文件数量</span><br>batch_size = <span class="hljs-number">100</span><br><br><span class="hljs-comment"># 6. 您的参与者表格文件的分隔符 (CSV 通常用逗号 &#x27;,&#x27;, TSV 通常用制表符 &#x27;\t&#x27;)</span><br>file_delimiter=<span class="hljs-string">&#x27;,&#x27;</span>  <span class="hljs-comment"># 默认使用逗号</span><br><span class="hljs-comment"># file_delimiter=&#x27;\t&#x27; # 如果是制表符分隔，请取消本行注释并注释掉上面一行</span><br><span class="hljs-comment"># --- 配置结束 ---</span><br><span class="hljs-comment"># --- 脚本主要逻辑 ---</span><br><span class="hljs-comment"># 尝试创建基础目标目录，如果它不存在的话</span><br><span class="hljs-keyword">try</span>:<br>    os.makedirs(destination_base_dir, exist_ok=<span class="hljs-literal">True</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;基础目标目录已创建或已存在: <span class="hljs-subst">&#123;destination_base_dir&#125;</span>&quot;</span>)<br><span class="hljs-keyword">except</span> OSError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;错误：无法创建基础目标目录 <span class="hljs-subst">&#123;destination_base_dir&#125;</span>: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>, file=sys.stderr)<br>    sys.exit(<span class="hljs-number">1</span>) <span class="hljs-comment"># 退出脚本</span><br>    <br><span class="hljs-comment"># 读取参与者表格，获取目标 .zip 文件列表</span><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;正在读取参与者表格: <span class="hljs-subst">&#123;participant_table_path&#125;</span>&quot;</span>)<br>    df = pd.read_csv(participant_table_path, delimiter=file_delimiter, dtype=<span class="hljs-built_in">str</span>)<br>    <span class="hljs-keyword">if</span> filename_column <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> df.columns:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;错误: 在文件 <span class="hljs-subst">&#123;participant_table_path&#125;</span> 中未找到列 &#x27;<span class="hljs-subst">&#123;filename_column&#125;</span>&#x27;&quot;</span>, file=sys.stderr)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;文件中包含的列有: <span class="hljs-subst">&#123;<span class="hljs-built_in">list</span>(df.columns)&#125;</span>&quot;</span>, file=sys.stderr)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请检查并更新脚本中的 &#x27;filename_column&#x27; 变量。&quot;</span>, file=sys.stderr)<br>        sys.exit(<span class="hljs-number">1</span>)<br>    target_files = <span class="hljs-built_in">set</span>(df[filename_column].dropna().unique())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;从表格中找到 <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(target_files)&#125;</span> 个唯一的目标 .zip 文件名。&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> target_files:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;警告：在指定列中未找到任何目标文件名。请检查列名和文件内容。&quot;</span>)<br>        sys.exit(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">except</span> FileNotFoundError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;错误: 参与者表格文件未找到，路径: <span class="hljs-subst">&#123;participant_table_path&#125;</span>&quot;</span>, file=sys.stderr)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请检查并更新脚本中的 &#x27;participant_table_path&#x27; 变量。&quot;</span>, file=sys.stderr)<br>    sys.exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;错误：读取参与者表格 <span class="hljs-subst">&#123;participant_table_path&#125;</span> 时出错: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>, file=sys.stderr)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请检查您的文件分隔符 &#x27;<span class="hljs-subst">&#123;file_delimiter&#125;</span>&#x27; 是否设置正确。&quot;</span>, file=sys.stderr)<br>    sys.exit(<span class="hljs-number">1</span>)<br>    <br><span class="hljs-comment"># 用于跟踪已成功复制的文件数量，以确定批次</span><br>files_copied_count = <span class="hljs-number">0</span><br><span class="hljs-comment"># 用于存储在源目录中实际找到并已处理的目标文件名，防止重复处理</span><br>files_processed = <span class="hljs-built_in">set</span>()<br><br><span class="hljs-comment"># 遍历源基础目录及其所有子目录</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n正在搜索目标文件于: <span class="hljs-subst">&#123;source_base_dir&#125;</span> 及其子目录...&quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 为了让批次稍微稳定些（虽然不保证全局有序），可以先收集所有找到的文件路径</span><br>    found_file_paths = &#123;&#125; <span class="hljs-comment"># 存储找到的文件名及其完整路径</span><br>    <span class="hljs-keyword">for</span> root, dirs, files_in_current_dir <span class="hljs-keyword">in</span> os.walk(source_base_dir):<br>        <span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> files_in_current_dir:<br>            <span class="hljs-keyword">if</span> file_name <span class="hljs-keyword">in</span> target_files:<br>                <span class="hljs-comment"># 如果同一个文件名在不同地方找到，保留第一个找到的路径（或根据需要选择逻辑）</span><br>                <span class="hljs-keyword">if</span> file_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> found_file_paths:<br>                    found_file_paths[file_name] = os.path.join(root, file_name)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;在源目录中初步定位到 <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(found_file_paths)&#125;</span> 个目标文件。开始复制并分批...&quot;</span>)<br><br>    <span class="hljs-comment"># 按文件名排序（可选，为了让处理顺序更确定）</span><br>    sorted_target_files_found = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">list</span>(found_file_paths.keys()))<br><br>    <span class="hljs-comment"># 遍历找到的目标文件进行复制和分批</span><br>    <span class="hljs-keyword">for</span> filename_to_copy <span class="hljs-keyword">in</span> sorted_target_files_found:<br>        <span class="hljs-comment"># --- 分批逻辑开始 ---</span><br>        <span class="hljs-comment"># 计算当前文件应该属于哪个批次 (从 1 开始计数)</span><br>        <span class="hljs-comment"># 使用 files_copied_count 来决定批次号</span><br>        batch_index = (files_copied_count // batch_size) + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 构建当前批次的子目录名称 (例如 batch_001, batch_002)，使用 3 位补零</span><br>        current_batch_subdir_name = <span class="hljs-string">f&quot;batch_<span class="hljs-subst">&#123;batch_index:03d&#125;</span>&quot;</span><br>        <span class="hljs-comment"># 构建当前批次的完整目录路径</span><br>        current_batch_dir = os.path.join(destination_base_dir, current_batch_subdir_name)<br><br>        <span class="hljs-comment"># 如果当前批次的子目录不存在，则创建它</span><br>        os.makedirs(current_batch_dir, exist_ok=<span class="hljs-literal">True</span>)<br>        <span class="hljs-comment"># --- 分批逻辑结束 ---</span><br><br>        <span class="hljs-comment"># 获取源文件路径和目标文件路径（指向批次子目录）</span><br>        source_path = found_file_paths[filename_to_copy]<br>        dest_path = os.path.join(current_batch_dir, filename_to_copy) <span class="hljs-comment"># 指向子目录</span><br><br>        <span class="hljs-comment"># 尝试复制文件</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  目标文件: <span class="hljs-subst">&#123;filename_to_copy&#125;</span>&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  归入批次: <span class="hljs-subst">&#123;current_batch_subdir_name&#125;</span>&quot;</span>)<br>            <span class="hljs-comment"># print(f&quot;  源路径: &#123;source_path&#125;&quot;) # 可取消注释以打印源路径</span><br>            <span class="hljs-comment"># print(f&quot;  目标路径: &#123;dest_path&#125;&quot;) # 可取消注释以打印目标路径</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  正在复制...&quot;</span>)<br>            shutil.copy2(source_path, dest_path) <span class="hljs-comment"># copy2 保留元数据</span><br>            files_copied_count += <span class="hljs-number">1</span> <span class="hljs-comment"># 只有成功复制后才增加计数器</span><br>            files_processed.add(filename_to_copy) <span class="hljs-comment"># 标记为已处理</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  成功复制 <span class="hljs-subst">&#123;filename_to_copy&#125;</span> 到 <span class="hljs-subst">&#123;current_batch_subdir_name&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  错误：复制文件 <span class="hljs-subst">&#123;filename_to_copy&#125;</span> 时出错: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>, file=sys.stderr)<br>            <span class="hljs-comment"># 如果复制失败，可以选择是否继续处理下一个文件，目前是继续</span><br><br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;在目录遍历或文件处理过程中发生严重错误: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>, file=sys.stderr)<br>  <br></code></pre></td></tr></table></figure><p>压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">zip -r 001.zip batch_001/<br><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> batch_???/; <span class="hljs-keyword">do</span> [ -d <span class="hljs-string">&quot;<span class="hljs-variable">$dir</span>&quot;</span> ] &amp;&amp; base=$(<span class="hljs-built_in">basename</span> <span class="hljs-string">&quot;<span class="hljs-variable">$dir</span>&quot;</span>) &amp;&amp; num=<span class="hljs-variable">$&#123;base#batch_&#125;</span> &amp;&amp; zip -r <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;num&#125;</span>.zip&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$dir</span>&quot;</span>; <span class="hljs-keyword">done</span><br><span class="hljs-comment">#请在包含所有 batch_XXX 文件夹的父目录下，直接运行上面这条单行命令。 它会自动查找所有 batch_XXX/ 目录，并为每一个目录执行正确的 zip -r XXX.zip batch_XXX/ 命令。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>bash</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>掌握 Markdown：从基础语法到 GitHub 博文轻松发布</title>
    <link href="/2025/05/07/%E6%8E%8C%E6%8F%A1%20Markdown%EF%BC%9A%E4%BB%8E%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%88%B0%20GitHub%20%E5%8D%9A%E6%96%87%E8%BD%BB%E6%9D%BE%E5%8F%91%E5%B8%83/"/>
    <url>/2025/05/07/%E6%8E%8C%E6%8F%A1%20Markdown%EF%BC%9A%E4%BB%8E%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%88%B0%20GitHub%20%E5%8D%9A%E6%96%87%E8%BD%BB%E6%9D%BE%E5%8F%91%E5%B8%83/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="掌握-Markdown：从基础语法到-GitHub-博文轻松发布"><a href="#掌握-Markdown：从基础语法到-GitHub-博文轻松发布" class="headerlink" title="掌握 Markdown：从基础语法到 GitHub 博文轻松发布"></a>掌握 Markdown：从基础语法到 GitHub 博文轻松发布</h1><p>在数字化写作日益普及的今天，掌握一种简洁高效的标记语言变得越来越重要。Markdown 因其轻量、易读易写的特性，受到了广大写作者和开发者的青睐。同时，GitHub 作为全球最大的代码托管平台，也为我们提供了便捷的博客发布功能。本文将带你全面了解 Markdown 的常用语法，并详细介绍如何将你的 Markdown 博文上传到 GitHub。</p><hr><h2 id="第一部分：Markdown-格式写作要求与举例"><a href="#第一部分：Markdown-格式写作要求与举例" class="headerlink" title="第一部分：Markdown 格式写作要求与举例"></a>第一部分：Markdown 格式写作要求与举例</h2><p>Markdown 的目标是实现「易读易写」。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。</p><p>以下是一些常用的 Markdown 语法：</p><h3 id="1-标题-Headers"><a href="#1-标题-Headers" class="headerlink" title="1. 标题 (Headers)"></a>1. 标题 (Headers)</h3><p>在文字前加上 <code>#</code> 号，可以创建标题。<code>#</code> 的数量决定了标题的级别，最多支持六级标题。</p><ul><li>示例：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 这是一级标题</span><br><span class="hljs-section">## 这是二级标题</span><br><span class="hljs-section">### 这是三级标题</span><br><span class="hljs-section">#### 这是四级标题</span><br><span class="hljs-section">##### 这是五级标题</span><br><span class="hljs-section">###### 这是六级标题</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-段落-Paragraphs"><a href="#2-段落-Paragraphs" class="headerlink" title="2. 段落 (Paragraphs)"></a>2. 段落 (Paragraphs)</h3><p>段落是最基本的文本单元。段落之间通过一个或多个空行来分隔。</p><ul><li>示例：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是一个段落。<br><br>这是另一个段落。<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-强调-Emphasis"><a href="#3-强调-Emphasis" class="headerlink" title="3. 强调 (Emphasis)"></a>3. 强调 (Emphasis)</h3><ul><li><p><strong>加粗 (Bold)</strong>：使用两个 <code>**</code> 或 <code>__</code> 包裹文字。</p></li><li><p><strong>斜体 (Italic)</strong>：使用一个 <code>*</code> 或 <code>_</code> 包裹文字。</p></li><li><p><strong>加粗并斜体 (Bold and Italic)</strong>：使用三个 <code>***</code> 或 <code>___</code> 包裹文字。</p></li><li><p>示例：</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**这是加粗的文字**</span><br><span class="hljs-strong">__这也是加粗的文字__</span><br><br><span class="hljs-emphasis">*这是斜体的文字*</span><br><span class="hljs-emphasis">_这也是斜体的文字_</span><br><br><span class="hljs-strong">**<span class="hljs-emphasis">*这是加粗并斜体的文字*</span>**</span><br><span class="hljs-strong">__<span class="hljs-emphasis">_这也是加粗并斜体的文字_</span>__</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="4-列表-Lists"><a href="#4-列表-Lists" class="headerlink" title="4. 列表 (Lists)"></a>4. 列表 (Lists)</h3><ul><li><p><strong>无序列表 (Unordered Lists)</strong>：使用 <code>*</code>、<code>+</code> 或 <code>-</code> 作为列表标记。</p></li><li><p><strong>有序列表 (Ordered Lists)</strong>：使用数字加英文句点 <code>.</code> 作为列表标记。</p></li><li><p>示例：</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 项目一<br><span class="hljs-bullet">*</span> 项目二<br><span class="hljs-bullet">*</span> 项目三<br><br><span class="hljs-bullet">-</span> 项目 A<br><span class="hljs-bullet">-</span> 项目 B<br><span class="hljs-bullet">-</span> 项目 C<br><br><span class="hljs-bullet">1.</span> 第一项<br><span class="hljs-bullet">2.</span> 第二项<br><span class="hljs-bullet">3.</span> 第三项<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-链接-Links"><a href="#5-链接-Links" class="headerlink" title="5. 链接 (Links)"></a>5. 链接 (Links)</h3><p>行内式链接：<code>[链接文字](链接地址)</code><br>参考式链接：在文末定义链接，然后在需要的地方引用。</p><ul><li>示例（行内式）：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">访问我的博客</span>](<span class="hljs-link">https://example.com</span>)<br>[<span class="hljs-string">访问我的博客并带有标题</span>](<span class="hljs-link">https://example.com &quot;博客标题&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="6-图片-Images"><a href="#6-图片-Images" class="headerlink" title="6. 图片 (Images)"></a>6. 图片 (Images)</h3><p>与链接类似，只是在前面多一个 <code>!</code>。<br>行内式图片：<code>![图片替代文字](图片链接)</code></p><ul><li>示例：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">谷歌 Logo</span>](<span class="hljs-link">https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="7-代码-Code"><a href="#7-代码-Code" class="headerlink" title="7. 代码 (Code)"></a>7. 代码 (Code)</h3><ul><li><p><strong>行内代码 (Inline Code)</strong>：使用反引号 <code>`</code> 包裹代码。</p></li><li><p><strong>代码块 (Code Blocks)</strong>：使用三个反引号 &#96;&#96;&#96; 包裹代码块，并可以指定语言类型。</p></li><li><p>示例：</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是一个行内代码的例子：<span class="hljs-code">`print(&quot;Hello, World!&quot;)`</span>。<br><br>这是一个 Python 代码块：<br><span class="hljs-code">```python</span><br><span class="hljs-code">def greet(name):</span><br><span class="hljs-code">    print(f&quot;Hello, &#123;name&#125;!&quot;)</span><br></code></pre></td></tr></table></figure><p>  这是一个 JavaScript 代码块：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br></code></pre></td></tr></table></figure>  <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>### <span class="hljs-number">8</span>. 引用 (Blockquotes)<br><br>在段落前加上 `&gt;` 符号。<br><br>* 示例：<br>    ```markdown<br>    &gt; 这是一段引用的文字。<br>    &gt;<br>    &gt; &gt; 嵌套引用也是可以的。<br></code></pre></td></tr></table></figure></li></ul><h3 id="9-分隔线-Horizontal-Rules"><a href="#9-分隔线-Horizontal-Rules" class="headerlink" title="9. 分隔线 (Horizontal Rules)"></a>9. 分隔线 (Horizontal Rules)</h3><p>使用三个或以上的 <code>*</code>、<code>-</code> 或 <code>_</code> 来创建分隔线，行内不能有其他字符。</p><ul><li>示例：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"><span class="hljs-strong">***</span></span><br><span class="hljs-strong"><span class="hljs-section">---</span></span><br><span class="hljs-strong"><span class="hljs-section">__<span class="hljs-emphasis">_</span></span></span><br></code></pre></td></tr></table></figure></li></ul><h3 id="10-表格-Tables-通常是-Markdown-扩展语法，GitHub-支持"><a href="#10-表格-Tables-通常是-Markdown-扩展语法，GitHub-支持" class="headerlink" title="10. 表格 (Tables) (通常是 Markdown 扩展语法，GitHub 支持)"></a>10. 表格 (Tables) (通常是 Markdown 扩展语法，GitHub 支持)</h3><p>使用 <code>|</code> 分隔单元格，使用 <code>-</code> 分隔表头和表内容，并可以使用 <code>:</code> 控制对齐方式。</p><ul><li>示例：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| 表头1 | 表头2 | 表头3 |<br>| :---- | :---: | ----: |<br>| 左对齐 | 居中对齐 | 右对齐 |<br>| 内容1 | 内容2 | 内容3 |<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="第二部分：GitHub-博文上传流程"><a href="#第二部分：GitHub-博文上传流程" class="headerlink" title="第二部分：GitHub 博文上传流程"></a>第二部分：GitHub 博文上传流程</h2><p>将 Markdown 博文上传到 GitHub 并通过 GitHub Pages 展示，通常有以下几种方式：</p><h3 id="方式一：直接在-GitHub-仓库中创建-上传文件"><a href="#方式一：直接在-GitHub-仓库中创建-上传文件" class="headerlink" title="方式一：直接在 GitHub 仓库中创建&#x2F;上传文件"></a>方式一：直接在 GitHub 仓库中创建&#x2F;上传文件</h3><p>这是最简单直接的方式，适合初学者。</p><ol><li><p><strong>创建&#x2F;选择仓库 (Repository)：</strong></p><ul><li><strong>新建仓库：</strong> 如果你还没有用于存放博客的仓库，可以新建一个。通常命名为 <code>&lt;username&gt;.github.io</code>（其中 <code>&lt;username&gt;</code> 是你的 GitHub 用户名），这样可以直接通过 <code>https://&lt;username&gt;.github.io</code> 访问。</li><li><strong>已有仓库：</strong> 如果你已经有仓库，可以直接使用。你可能需要在仓库的 <code>Settings</code> -&gt; <code>Pages</code> 中配置 GitHub Pages 的源。</li></ul></li><li><p><strong>创建&#x2F;上传 Markdown 文件：</strong></p><ul><li><strong>创建新文件：</strong> 在你的仓库中，点击 “Add file” -&gt; “Create new file”。</li><li><strong>命名文件：</strong> 给你的博文文件命名，通常以 <code>.md</code> 或 <code>.markdown</code> 作为后缀，例如 <code>my-first-post.md</code>。 你也可以创建文件夹来组织博文，例如 <code>_posts/YYYY-MM-DD-your-post-title.md</code> (Jekyll 格式，GitHub Pages 常用的静态站点生成器)。</li><li><strong>撰写内容：</strong> 在编辑器中粘贴或撰写你的 Markdown 内容。</li><li><strong>上传文件：</strong> 如果你已经在本地写好了 Markdown 文件，可以选择 “Add file” -&gt; “Upload files”，然后将文件拖拽或选择上传。</li></ul></li><li><p><strong>提交更改 (Commit changes)：</strong></p><ul><li>在页面下方，你会看到 “Commit new file” 或 “Commit changes” 的区域。</li><li>填写提交信息 (Commit message)，简要描述你这次的更改，例如 “Add my first blog post”。</li><li>选择提交到主分支 (通常是 <code>main</code> 或 <code>master</code>) 或创建一个新的分支进行提交 (推荐用于协作或复杂更改)。</li><li>点击 “Commit new file” 或 “Commit changes”。</li></ul></li><li><p><strong>查看博文 (如果使用 GitHub Pages)：</strong></p><ul><li>如果你使用的是 <code>&lt;username&gt;.github.io</code> 仓库，或者在其他仓库中正确配置了 GitHub Pages，稍等片刻 (GitHub Pages 需要一些时间来构建和部署)，你就可以通过相应的 URL 访问你的博文了。</li><li>例如：<code>https://&lt;username&gt;.github.io/my-first-post.html</code> (如果直接放在根目录) 或 <code>https://&lt;username&gt;.github.io/_posts/your-post-title.html</code> (如果使用 Jekyll 结构，链接格式可能因配置而异)。</li></ul></li></ol><h3 id="方式二：使用-Git-进行本地管理和推送"><a href="#方式二：使用-Git-进行本地管理和推送" class="headerlink" title="方式二：使用 Git 进行本地管理和推送"></a>方式二：使用 Git 进行本地管理和推送</h3><p>这种方式更专业，也更灵活，适合熟悉 Git 操作的用户。</p><ol><li><p><strong>安装 Git：</strong> 如果你本地还没有安装 Git，请先下载并安装。</p></li><li><p><strong>克隆仓库 (Clone Repository)：</strong></p><ul><li>打开你的终端或 Git Bash。</li><li>将你的 GitHub 仓库克隆到本地：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> [https://github.com/](https://github.com/)&lt;username&gt;/&lt;repository-name&gt;.git<br></code></pre></td></tr></table></figure>  例如：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> [https://github.com/yourusername/yourusername.github.io.git](https://github.com/yourusername/yourusername.github.io.git)<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>创建&#x2F;编辑 Markdown 文件：</strong></p><ul><li>在本地克隆下来的仓库文件夹中，创建或修改你的 Markdown 博文文件。你可以使用任何你喜欢的文本编辑器 (如 VS Code, Sublime Text, Typora 等)。</li></ul></li><li><p><strong>添加、提交和推送更改：</strong></p><ul><li>打开终端或 Git Bash，进入你的本地仓库目录。</li><li><strong>添加文件到暂存区：</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add your-post-file.md  <span class="hljs-comment"># 添加指定文件</span><br><span class="hljs-comment"># 或者</span><br>git add .  <span class="hljs-comment"># 添加所有更改的文件</span><br></code></pre></td></tr></table></figure></li><li><strong>提交更改到本地仓库：</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;Added new blog post: Your Post Title&quot;</span><br></code></pre></td></tr></table></figure></li><li><strong>推送到 GitHub 远程仓库：</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin main  <span class="hljs-comment"># 或者你的主分支名称，如 master</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>查看博文 (如果使用 GitHub Pages)：</strong></p><ul><li>同样，稍等片刻让 GitHub Pages 构建和部署，然后通过 URL 访问。</li></ul></li></ol><h3 id="方式三：使用静态站点生成器-如-Jekyll-Hugo-Hexo-等"><a href="#方式三：使用静态站点生成器-如-Jekyll-Hugo-Hexo-等" class="headerlink" title="方式三：使用静态站点生成器 (如 Jekyll, Hugo, Hexo 等)"></a>方式三：使用静态站点生成器 (如 Jekyll, Hugo, Hexo 等)</h3><p>这是更高级的方式，可以让你构建功能更丰富的博客，但学习曲线也相对陡峭一些。</p><ol><li><strong>选择并安装静态站点生成器：</strong> 例如 Jekyll (Ruby), Hugo (Go), Hexo (Node.js)。</li><li><strong>初始化项目：</strong> 根据所选生成器的文档初始化你的博客项目。</li><li><strong>创建 Markdown 博文：</strong> 通常在特定的目录 (如 <code>_posts</code>) 下创建 Markdown 文件。这些生成器通常有自己的文件命名和 Front Matter (文件头部元数据) 规范。</li><li><strong>本地预览：</strong> 大多数生成器都支持本地服务器，方便你实时预览效果。</li><li><strong>生成静态文件：</strong> 运行生成命令 (如 <code>jekyll build</code>, <code>hugo</code>, <code>hexo generate</code>)，将 Markdown 文件等转换为 HTML、CSS 和 JavaScript 文件。</li><li><strong>部署到 GitHub Pages：</strong><ul><li><strong>方法一：手动推送 <code>docs</code> 目录或 <code>gh-pages</code> 分支：</strong> 将生成器生成的静态文件目录 (通常是 <code>_site</code>, <code>public</code>, <code>docs</code> 等) 中的内容推送到你的 GitHub 仓库的 <code>main</code> 分支的 <code>/docs</code> 文件夹，或者一个名为 <code>gh-pages</code> 的分支，并在 GitHub Pages 设置中选择对应的源。</li><li><strong>方法二：使用 GitHub Actions 自动化部署：</strong> 这是推荐的方式，可以配置 GitHub Actions 在你推送到特定分支 (如 <code>main</code>) 时，自动运行构建命令并部署到 <code>gh-pages</code> 分支或发布到 GitHub Pages。</li></ul></li></ol><h3 id="一些-GitHub-Pages-的小提示："><a href="#一些-GitHub-Pages-的小提示：" class="headerlink" title="一些 GitHub Pages 的小提示："></a>一些 GitHub Pages 的小提示：</h3><ul><li><strong>默认主题：</strong> GitHub Pages 允许你选择一些预设的主题，可以在仓库的 <code>Settings</code> -&gt; <code>Pages</code> 中进行配置。</li><li><strong>自定义域名：</strong> 你可以将自己的域名指向你的 GitHub Pages 博客。</li><li><strong>Jekyll：</strong> GitHub Pages 对 Jekyll 有原生支持。如果你将 Markdown 文件按照 Jekyll 的规范组织 (例如在 <code>_posts</code> 目录下，文件名格式为 <code>YYYY-MM-DD-title.md</code>)，GitHub Pages 会自动为你构建网站。</li></ul><hr><h2 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h2><p>Markdown 以其简洁高效的特性，让内容创作回归本质。而 GitHub 则为我们提供了强大的平台来分享和展示我们的作品。希望通过本文的介绍，你能熟练掌握 Markdown 的基本语法，并顺利地在 GitHub 上发布你的博文。开始你的创作之旅吧！</p><hr><h2 id="使用建议："><a href="#使用建议：" class="headerlink" title="使用建议："></a>使用建议：</h2><ul><li><strong>实际操作：</strong> 最好在阅读时，自己动手尝试这些 Markdown 语法和 GitHub 上传流程。</li><li><strong>截图辅助：</strong> 在你的博文中，可以加入 GitHub 操作界面的截图，使流程更清晰易懂。</li><li><strong>个性化：</strong> 根据你的目标读者和个人风格，调整博文的语气和深度。</li><li><strong>举一反三：</strong> Markdown 的语法还有更多高级用法 (如任务列表、脚注、定义列表等)，可以鼓励读者进一步探索。</li></ul><p>我的<a href="https://github.com/xingdayup/xingdayup.github.io.git">GitHub仓库</a></p><h2 id="第三部分、我的博客的文章建立与上传"><a href="#第三部分、我的博客的文章建立与上传" class="headerlink" title="第三部分、我的博客的文章建立与上传"></a>第三部分、我的博客的文章建立与上传</h2><h3 id="创建一个新post"><a href="#创建一个新post" class="headerlink" title="创建一个新post"></a>创建一个新post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>写作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《小苏加油》</title>
    <link href="/2021/06/10/Su/"/>
    <url>/2021/06/10/Su/</url>
    
    <content type="html"><![CDATA[<p>苏苏苏苏苏苏苏苏苏</p><p><img src="/../image/Su/su.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Like</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
