<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>精神分裂症多基因风险相关多模态MRI额颞叶网络的推导和应用</title>
    <link href="/2025/05/21/MCCAR_jICA/"/>
    <url>/2025/05/21/MCCAR_jICA/</url>
    
    <content type="html"><![CDATA[<p><img src="/../image/MCCAR_jICA/image-20250521142133883.png" alt="image-20250521142133883"></p><p>这篇论文是我目前在做的工作的参考，因为我近来在用另一批数据套用这篇文章的方法，思路以及算法有些模糊了，所以重新整理一下。文章发表在Nature Communication，原标题为《<a href="https://www.nature.com/articles/s41467-022-32513-8">Derivation and utility of schizophrenia polygenic risk associated multimodal MRI frontotemporal network</a>》,发表时间是2022年八月。</p><hr><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>精神分裂症（SZ）是一种<strong>高度遗传</strong>的精神疾病，其特征是广泛的大脑<strong>功能和结构</strong>异常。然而，之前的 MRI 与多基因风险之间的关联研究大多是基于 ROI 的单一模态分析，而不是识别基于大脑的多模态预测生物标志物。根据英国生物银行数据集中健康白人的精神分裂症多基因风险评分 (PRS)（ N &#x3D; 22,459），我们<strong>发现了一种与 PRS 相关的稳健大脑模式</strong>，其灰质体积较小，额颞叶皮质功能激活减少，这将精神分裂症与精神分裂症<strong>区分</strong>开来。控制准确度为 &gt;83%，并<strong>预测</strong> 4 个独立精神分裂症队列的认知和症状。进一步的多种疾病比较表明，这些确定的额颞叶改变<strong>在精神分裂症和精神分裂情感患者中最为严重</strong>，在双相情感障碍中较轻，并且与自闭症、抑郁症和注意力缺陷多动障碍的对照者没有区别。这些发现表明，所识别出的与多基因风险评分（PRS）相关的多模态前颞网络具有作为精神分裂症特异性的跨诊断基因介导的脑部<strong>生物标志物</strong>的潜力。</p><ul><li>这里有几个问题<ol><li>多模态预测和单模态预测相比有什么优势？</li><li>为什么要将多基因风险与MRI关联，他们比不关联又有什么优势呢？</li><li>在我的工作中，我将<strong>IL-6</strong>作为介导物，如何将他们关联起来。</li></ol></li></ul><h2 id="前言概述"><a href="#前言概述" class="headerlink" title="前言概述"></a>前言概述</h2><h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><ol><li>精神分裂症与遗传因素-基因风险分数（PRS）关联；</li><li>精神分裂症与大脑结构有关，部分大脑结构改变与认知有关；</li><li>SZ_PRS与MRI的结构和功能都有关联（啥叫关联？），可能导致心理功能与临床症状的改变。<strong>将PRS与MRI进行结合，可以从遗传和脑表型两个角度对精神分裂症相关的潜在的病理生理过程提供互补的见解</strong>。</li><li>目前尽管有报道称精神分裂症患者的大脑异常与 PRS 有关，但研究只关注了一种成像模式，并使用了基于感兴趣区（ROI）的简单相关分析。</li><li>尚未使用全脑多模态 MRI 融合来识别 <strong>PRS 相关模式</strong>，包括使用机器学习方法来评估其生物标记物特性。更具体地说，目前还没有针对 SZ 和健康对照（HC）分类的 <strong>PRS-多模态联合脑成像研究</strong>，也没有利用这些变量<strong>预测</strong>认知或症状的研究。</li><li>如果成功，本文提出的方法将是朝着使用成像遗传数据作为潜在生物标记物以协助临床医生进行鉴别诊断和预测相关临床结果迈出的重要一步。</li></ol><h3 id="文章思路"><a href="#文章思路" class="headerlink" title="文章思路"></a>文章思路</h3><p>研究旨在通过关联精神分裂症的多基因风险评分 (PRS-SZ) 与大脑结构和功能的特定协变模式，来识别精神分裂症的脑影像标记。</p><p>研究人员假设：</p><ol><li>PRS-SZ 与一种独特的多模态（静息态功能磁共振成像和结构磁共振成像）大脑模式相关。</li><li>这种大脑模式能够准确区分精神分裂症患者 (SZ) 和健康对照组 (HC)。</li><li>这种模式能够预测精神分裂症患者的重要临床指标。</li></ol><p>为实现这一目标，该研究包括了几个步骤：</p><ul><li><strong>发现阶段：</strong> 他们使用了来自英国生物样本库 (UK Biobank) 的大规模数据集（N &#x3D; 22,459名健康白人），基于<strong>低频振幅分数 (fALFF)</strong> 和<strong>灰质体积 (GMV)</strong> 来识别与PRS相关的脑模式。</li><li><strong>内部验证：</strong> 随后，在英国生物样本库内部，使用不同的人群样本和变化的遗传风险评分阈值对这种已识别的模式进行了验证。</li><li><strong>外部验证：</strong> 在四个独立（不同于英国生物样本库）的精神分裂症队列中，测试了这种与PRS相关的脑模式对精神分裂症患者进行分类以及预测认知&#x2F;症状结果的能力。</li><li><strong>特异性验证：</strong> 研究人员还调查了这种脑模式是否为精神分裂症所特有，或者是否也存在于其他精神疾病中。</li></ul><img src="../image/MCCAR_jICA/image-20250521142231135.png" alt="Flowchart for developing, testing and validating the SZ PRS-associated multimodal pattern" style="zoom: 50%;" /><p><em>(a) SZ PRS was used as a reference to guide fALFF + GMV fusion to identify PRS-associated multimodal networks. (b) PRS-associated networks were separated as positive (Z &gt; 0) and negative (Z &lt; 0) brain regions based on the Z-scored brain maps, resulting in 4 features for the following analysis. (c) The same fusion with PRS analysis was performed on healthy white people, healthy subjects, and all the available subjects within UKB with PRS thresholded at PSNP &#x3D; 5.0e−08, 1.0e−04 and 0.05, and pruned at r2 &lt; 0.1 and 0.2, respectively. (d) Group differences between SZ and HC of the identified PRS-associated features were tested across 4 independent SZ cohorts (including BSNIP-1, COBRE, fBIRN and MPRC). (e) Linear SVM was used to classify SZ and HC across 4 independent SZ cohorts based on PRSassociated features (including BSNIP-1, COBRE, fBIRN and MPRC); multiple linear  regression was performed to predict cognition and symptom for SZ across 3 independent cohorts (BSNIP-1, COBRE, and fBIRN). MPRC data were not included in the prediction analysis since the related clinical measures were not available. (f) Group differences between SZ and other psychosis subjects and their relatives, and between other psychiatric disorders (ASD, MDD, ADHD) and HC were tested. UKB (UK Biobank, N &#x3D; 37,347); BSNIP-1 (Bipolar and Schizophrenia Network for Intermediate Phenotypes), SZ: N &#x3D; 178; HC: N &#x3D; 220; COBRE (Center for Biomedical Research Excellence), SZ: N &#x3D; 100; HC: N &#x3D; 90; fBIRN (Functional Imaging Biomedical Informatics Research Network), SZ: N &#x3D; 164; HC: N &#x3D; 157; MPRC (Maryland Psychiatric Research Center), SZ: N &#x3D; 164; HC: N &#x3D; 157; ASD autism spectrum disorder, MDD major depressive disorder, ADHD attention-deficit&#x2F;hyperactivity disorder, SVM support vector machine.</em></p><p>最终目标是，通过整合来自大规模英国生物样本库样本和四个独立精神分裂症队列的多基因风险评分数据与多模态MRI特征，建立一个与精神分裂症遗传风险相关的、更稳健的功能-结构MRI特征。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><h3 id="SZ-PRS-associated-multimodal-brain-network"><a href="#SZ-PRS-associated-multimodal-brain-network" class="headerlink" title="SZ PRS-associated multimodal brain network"></a>SZ PRS-associated multimodal brain network</h3><p>这段文字描述了研究者如何识别与精神分裂症多基因风险评分 (PRS-SZ) 相关的多模态（fALFF + GMV）大脑网络模式。</p><p>主要内容如下：</p><ol><li><p><strong>PRS-SZ的计算：</strong> 研究者基于精神基因组学联盟 (PGC SZ 2) 的108个风险位点计算了精神分裂症的PRS，并设定了特定的统计学阈值 (PSNP &lt; 5.0e−08, r2 &lt; 0.1)。</p></li><li><p><strong>数据预处理：</strong> 在进行融合分析前，从fALFF（低频振幅分数）和GMV（灰质体积）特征矩阵中回归剔除了头动、研究地点、性别和年龄的影响。</p></li><li><p><strong>发现队列与方法：</strong> 使用英国生物样本库 (UKB) 中22,459名健康白人的数据，通过将PRS与fALFF和GMV数据进行融合分析，以识别与PRS相关的多模态模式。</p></li><li><p><strong>核心发现：</strong> 识别出一个与PRS呈正相关的联合成分。这个成分与PRS的fALFF相关性 r &#x3D; 0.074 (p &#x3D; 4.1e−30)，与GMV的相关性 r &#x3D; 0.074 (p &#x3D; 1.6e−28)，这些结果都经过了多重比较校正 (FDR)。</p><img src="../image/MCCAR_jICA/image-20250521143044027.png" alt="image-20250521143044027" style="zoom:50%;" /></li><li><p><strong>效应量与统计功效：</strong> 尽管该模式解释的方差小于1%（与以往基于ROI的单模态分析结果一致），但统计功效非常高 (1 − β &#x3D; 1)。</p><blockquote><p>解释的方差百分比计算方法就是将该联合成分与PRS-SZ之间的相关系数r (0.074) 进行平方，得到R²。</p></blockquote></li><li><p><strong>对比分析的局限性：</strong> 研究者指出，直接计算PRS与全脑体素水平MRI特征之间的相关性非常弱（fALFF最大绝对相关性r仅为0.03，GMV为0.028）。同样，基于脑图谱提取的平均值与PRS的相关性所解释的方差也小于1%。这凸显了融合分析方法的优势。</p><blockquote><p><strong>“直接计算PRS与全脑体素水平MRI特征之间的相关性非常弱”：</strong> 研究者除了使用复杂的“融合分析”方法外，还尝试了更简单直接的方法。一种是逐个体素（voxel，可以理解为MRI图像中的小立方体单元）地计算其fALFF或GMV值与PRS-SZ之间的相关性。结果发现，这种直接的相关性非常微弱。对于fALFF，在全脑数万个体素中，相关性系数r的最大绝对值也只有0.03；对于GMV，也只有0.028。这些r值接近于0，表明几乎没有线性关系。</p><p><strong>“同样，基于脑图谱提取的平均值与PRS的相关性所解释的方差也小于1%”：</strong> 另一种简单方法是，不看单个体素，而是根据已有的脑图谱（将大脑划分为不同区域的模板）计算每个脑区的平均fALFF或GMV值，再看这些平均值与PRS-SZ的相关性。结果是，这种方法解释的PRS-SZ方差也小于1%，与融合分析得到的整体模式的解释力相似（但融合分析找到了一个特定的“模式”，而这里只是看单个区域平均值）。</p><p><strong>“这凸显了融合分析方法的优势”：</strong> 这句话是结论。因为上述两种更直接、更简单的方法（逐体素分析、基于图谱的区域平均值分析）得到的相关性要么极低，要么解释力与融合分析方法相仿但未能揭示多模态的“协变模式”。而研究中采用的“融合分析”方法（原文提到“fusion with PRS was performed to identify PRS-associated fALFF + GMV multimodal pattern”）能够同时考虑fALFF和GMV两种模态的数据，并识别出它们如何“共同变化”以与PRS-SZ关联。尽管其解释的总方差也不高，但它能成功识别出一个统计上非常显著的、结构化的、多模态的“联合成分”或“模式”。这表明，精神分裂症的遗传风险可能不是简单地与单个脑区的孤立特征相关，而是与跨多个脑区、跨多种模态特征的复杂组合模式相关，而这种复杂模式需要更高级的分析方法（如融合分析）才能捕捉到。</p></blockquote></li><li><p>PRS相关模式的具体描述：</p><ul><li><strong>fALFF表现：</strong> 在额中下回 (MIFC)、颞上中回 (SMTC) 与PRS呈正相关（红色区域）；在丘脑、后扣带皮层 (PCC)、枕中回 (MOC) 和舌回 (LG) 与PRS呈负相关（蓝色区域）。</li><li><strong>GMV表现：</strong> 在前脑岛和海马区与PRS呈正相关；在中脑岛、颞上中下回 (SMITC)、梭状回 (FG) 和海马旁回与PRS呈负相关。</li></ul></li><li><p><strong>更多细节：</strong> 具体的脑区信息（Talairach标签）在补充表2中有详细列表。</p></li></ol><p>总而言之，研究通过一种多模态融合分析方法，在大量健康人群中成功识别出一个与精神分裂症遗传风险相关的、由特定脑区fALFF和GMV共同变化的复杂脑网络模式，尽管其<strong>解释的个体差异较小</strong>，但具有<strong>高度的统计学意义</strong>。 </p><h3 id="PRS-MRI-linkage-replication-in-SZ-patients"><a href="#PRS-MRI-linkage-replication-in-SZ-patients" class="headerlink" title="PRS-MRI linkage replication in SZ patients"></a>PRS-MRI linkage replication in SZ patients</h3><p>这段主要讲述了研究者如何对先前识别的**PRS（多基因风险评分）-MRI（脑影像）**关联模式进行验证和特异性确认。</p><p>主要分为两个部分：</p><ol><li><p><strong>在精神分裂症患者中复制PRS-MRI关联 (PRS-MRI linkage replication in SZ patients)：</strong></p><ul><li><strong>方法</strong>：研究者将先前在健康人群中识别出的PRS相关空间脑图谱（PRS spatial maps）<strong>线性投影</strong>到290名精神分裂症患者的数据上。</li><li><strong>结果</strong>：在这些患者中，PRS与该脑影像成分之间的相关性依然显著（fALFF：r &#x3D; 0.35, p &#x3D; 1.2e−04；GMV：r &#x3D; 0.33, p &#x3D; 1.4e−04）。星号表示经过FDR校正。</li></ul><img src="../image/MCCAR_jICA/image-20250521144350742.png" alt="image-20250521144350742" style="zoom:50%;" /><ul><li><strong>结论</strong>：这意味着PRS与该特定脑模式之间的关联能够在一个独立的精神分裂症患者数据集中得到复制和验证。</li></ul></li><li><p><strong>确认PRS相关模式的特异性 (Specificity Confirmation)：</strong></p><ul><li><strong>目的</strong>：为了证实提取出的PRS相关脑模式是特异于PRS本身的，而不是一个随机产生的模式。</li><li><strong>方法</strong>：研究者在有监督的融合分析中对PRS进行了置换检验（permuted the PRS）。这通常意味着他们打乱PRS的顺序，再进行分析，看是否还会出现类似的脑模式。</li><li><strong>结果</strong>：通过置换产生的随机模式（null pattern）与先前识别出的PRS相关模式非常不相似。</li><li><strong>结论</strong>：这证实了所识别的脑模式确实是与真实的PRS相关的，而非偶然或随机形成的。</li></ul><img src="../image/MCCAR_jICA/image-20250521151410818.png" alt="image-20250521151410818" style="zoom: 67%;" /></li></ol><p><strong>总结来说，研究者成功地在一个独立的精神分裂症患者队列中复制了最初发现的PRS与特定多模态脑影像模式之间的关联。此外，通过置换检验，他们还证明了这个脑模式是特异性地与精神分裂症的PRS相关，而不是一个随机的脑活动或结构模式。</strong></p><h3 id="PRS-pattern-consistency-across-PRS-parameters-within-UKB-sample"><a href="#PRS-pattern-consistency-across-PRS-parameters-within-UKB-sample" class="headerlink" title="PRS-pattern consistency across PRS parameters within UKB sample"></a>PRS-pattern consistency across PRS parameters within UKB sample</h3><p>这段阐述了研究者如何在英国生物样本库 (UKB) 内部，通过改变多种参数来验证先前识别的“PRS（多基因风险评分）相关脑模式”的稳定性和一致性。</p><p>主要验证方法和结果如下：</p><ol><li><p><strong>在UKB样本内部对PRS参数进行稳健性验证：</strong></p><ul><li><strong>方法</strong>：研究者在UKB样本的不同子集（健康的白人、所有健康被试、所有通过MRI质量控制的被试）中，使用了不同的PRS计算阈值（PSNP阈值：5.0e−08, 1.0e−04, 0.05；连锁不平衡剪枝阈值r²：&lt; 0.1 和 &lt; 0.2）重复了PRS引导的融合分析。</li></ul><img src="../image/MCCAR_jICA/image-20250521151059576.png" alt="Replication of the identified PRS-associated pattern within UKB" style="zoom:50%;" /><ul><li>结果：<ul><li>已识别的PRS相关的额颞叶模式 (frontotemporal pattern) 在UKB内部具有高度可重复性。</li><li>在不同的剪枝阈值和人群选择策略下，特定的fALFF模式（额中下回MIFC、颞上中回SMTC呈正相关；丘脑、后扣带皮层PCC、枕中回MOC、舌回LG呈负相关）和GMV模式（前脑岛、海马呈正相关；中脑岛、颞上中下回SMITC、梭状回FG、海马旁回呈负相关）具有超过80%的空间相似性。</li><li>在不同的PSNP阈值下，部分核心模式（fALFF在MIFC、SMTC的正相关，PCC、MOC的负相关；GMV在前脑岛、海马的正相关，中脑岛、海马旁回的负相关）也得到了超过50%的空间相似性验证。</li></ul></li></ul></li><li><p><strong>使用不同版本的PRS定义进行验证：</strong></p><ul><li><strong>方法</strong>：研究者还使用了基于更新的PGC SZ 3（包含270个位点，来自更大规模的GWAS研究）计算的PRS进行了验证。</li><li>结果：<ul><li>基于PGC3和PGC2计算出的精神分裂症PRS之间高度相关。</li><li>使用PGC2引导的融合分析和PGC3引导的融合分析所识别出的PRS相关脑模式也非常相似（fALFF成分相似性为0.89，GMV成分相似性为0.85）。</li></ul></li></ul></li></ol><p><strong>总结来说，该研究通过在UKB样本内改变人群选择、PRS计算的PSNP阈值和剪枝阈值，以及使用来自不同GWAS研究版本（PGC2 vs PGC3）的PRS定义，均发现先前识别的核心PRS相关脑模式（特别是额颞叶区域的fALFF和GMV变化）具有高度的稳定性和可重复性。这增强了该PRS相关脑模式作为精神分裂症潜在生物标记的可靠性。</strong></p><h3 id="Site-and-motion-effects-on-the-identified-PRS-pattern"><a href="#Site-and-motion-effects-on-the-identified-PRS-pattern" class="headerlink" title="Site and motion effects on the identified PRS-pattern"></a>Site and motion effects on the identified PRS-pattern</h3><p>这段主要评估了MRI扫描地点 (site) 和头动 (motion) 以及智商 (IQ) 这些潜在混杂因素对先前识别的“PRS（多基因风险评分）相关脑模式”的影响。</p><p>主要内容和结论如下：</p><ol><li><strong>地点效应 (Site effects)：</strong><ul><li>UKB数据来自三个不同的扫描地点（Cheadle, Reading, Newcastle）。</li><li>研究者分别对每个地点的数据进行了PRS引导的融合分析。</li><li>结果显示，在三个地点各自识别出的PRS相关额颞叶模式与整体UKB样本识别的模式之间存在高度的空间相似性（&gt;0.70）。</li><li><strong>重要前提</strong>：在最初的主要融合分析中，地点效应已经作为协变量从fALFF&#x2F;GMV特征矩阵中被回归剔除了。</li><li><strong>结论</strong>：因此，研究者认为扫描地点不是影响所识别PRS相关额颞叶多模态模式的主要混杂因素。</li></ul></li><li><strong>头动效应 (Motion effects)：</strong><ul><li>研究者采取了多种策略来控制头动伪影的影响：<ul><li><strong>预处理</strong>：对fMRI数据进行尖波去除 (despiked)，并回归掉包括6个头动参数在内的多种滋扰协变量。</li><li><strong>被试排除</strong>：在主要分析中排除了头动过大的被试。</li><li><strong>敏感性分析</strong>：选取了一个头动更小（FD &lt; 0.2 mm, N &#x3D; 13,490）的UKB子集进行PRS引导的融合分析，结果显示先前识别的PRS相关模式（额颞叶和丘脑的fALFF，以及丘脑、海马、海马旁回和颞叶的GMV）在该低头动子集中得到了复制。</li><li><strong>其他证据</strong>：精神分裂症组(SZ)与健康对照组(HC)在头动上无显著差异；平均头动(mean FD)与PRS之间无显著相关性；在回归掉平均头动后，已识别成分与PRS之间的偏相关依然显著。</li><li><strong>分析方法选择</strong>：当前融合分析基于对头动相对不敏感的fALFF，而非对头动更敏感的功能连接。</li><li><strong>重要前提</strong>：在最初的融合分析前，平均头动也已从fALFF&#x2F;GMV特征矩阵中被回归剔除。</li></ul></li><li><strong>结论</strong>：研究者认为微小的头动不是影响当前研究结果的主要因素。</li></ul></li><li><strong>智商效应 (IQ effects)：</strong><ul><li>PRS与IQ之间的直接相关性仅为边缘显著（p &#x3D; e−05，未经FDR校正）。</li><li>在回归掉IQ的影响后，得到的PRS相关模式与原始的PRS模式几乎相同。</li><li><strong>结论</strong>：IQ不是影响所识别PRS模式的主要混杂因素。</li></ul></li></ol><p><strong>总而言之，这段文字表明，研究者通过一系列严格的检验和控制，认为他们所识别的PRS相关脑模式对于MRI扫描地点、头动以及智商这些潜在的混杂因素是稳健的，这些因素并未对主要研究结果构成显著影响。</strong></p><h3 id="Group-differences-of-PRS-pattern-between-SZ-and-HC"><a href="#Group-differences-of-PRS-pattern-between-SZ-and-HC" class="headerlink" title="Group differences of PRS-pattern between SZ and HC"></a>Group differences of PRS-pattern between SZ and HC</h3><p>这段描述了研究者如何比较先前识别的<strong>PRS（多基因风险评分）相关脑模式</strong>在精神分裂症患者 (SZ) 和健康对照组 (HC) 之间的差异。</p><p>主要步骤和结果如下：</p><ol><li><p><strong>提取PRS相关脑模式特征：</strong></p><ul><li>研究者将先前识别的与PRS相关的fALFF（低频振幅分数）和GMV（灰质体积）成分，根据其Z值脑图谱，分成了“正相关网络”（Z &gt; 0的部分）和“负相关网络”（Z &lt; 0的部分）<em>“掩模”(mask) 或“感兴趣区域”(Region of Interest, ROI)</em>。</li><li>通过<strong>计算这些网络内fALFF或GMV的平均值</strong>，得到了四个与PRS相关的脑特征：fALFF_positive (fALFF正相关网络均值), fALFF_negative (fALFF负相关网络均值), GMV_positive (GMV正相关网络均值), 和 GMV_negative (GMV负相关网络均值)。</li></ul><img src="../image/MCCAR_jICA/image-20250521155020394.png" alt="The diagnostic ability of the identified PRS-associated frontal-temporal network." style="zoom: 67%;" /></li><li><p><strong>比较SZ和HC之间的组间差异：</strong></p><ul><li>使用双样本t检验来评估这四个PRS相关脑特征在SZ患者和HC之间的差异。</li><li><strong>结果显示</strong>：在fMRI的正相关和负相关网络中，以及在sMRI的正相关和负相关网络中，精神分裂症患者的fALFF值和GMV值均<strong>持续显著低于</strong>健康对照组。</li><li>这一发现在<strong>四个独立的研究队列</strong>中都得到了验证，这些队列包括：BSNIP-1、COBRE、fBIRN和MPRC。</li></ul></li></ol><p><strong>总结来说，研究者将先前发现的与遗传风险相关的多模态脑模式分解为四个具体的量化特征。通过比较这些特征，他们发现在四个不同的精神分裂症患者队列中，患者在所有这四个PRS相关脑特征上的值都一致且显著地低于健康对照组。这表明该PRS相关脑模式在精神分裂症患者中表现出普遍性的减弱。</strong></p><h3 id="Classification-between-SZ-and-HC"><a href="#Classification-between-SZ-and-HC" class="headerlink" title="Classification between SZ and HC"></a>Classification between SZ and HC</h3><p>该研究通过使用线性支持向量机 (SVM) 方法，验证了先前识别的与精神分裂症多基因风险评分 (PRS) 相关脑网络的分类能力，用以区分精神分裂症 (SZ) 患者和健康对照组 (HC) 。</p><p>在分类特征的选择上，除了使用在PRS相关网络（fALFF&#x2F;GMV的阳性和阴性网络）中提取的平均fALFF&#x2F;GMV值外，研究者还纳入了在这些已识别PRS网络内分解fALFF&#x2F;GMV阳性&#x2F;阴性特征矩阵得到的<strong>前5个主成分 (PC)</strong> 。每个PRS相关网络因此产生6个特征（1个平均值 + 5个PC），总共形成了<strong>24个特征</strong>用于每个HC-SZ队列的分类 。加入PC的理由是前5个PC能够捕获PRS相关感兴趣区域 (ROI) 中99%的方差，而平均值仅能代表不到50%的方差 。</p><p><strong>分类结果显示</strong>，这些PRS相关特征在4个独立的SZ队列（BSNIP-1, COBRE, fBIRN, MPRC）中均能稳定地分类SZ和HC，准确率超过83%，AUC值超过0.9 。具体表现为：BSNIP-1队列准确率85.2%，AUC为0.95；COBRE队列准确率83.7%，AUC为0.90；fBIRN队列准确率89.9%，AUC为0.96；MPRC队列准确率84.4%，AUC为0.94 。研究还发现，**第一个PC对分类的贡献最大，其次是平均值，这表明了在分类中加入额外5个PC的必要性 。**重要的是，这5个PC是从已识别的PRS相关ROI中提取的，而非全脑数据 。</p><p>为了证实分类结果的特异性，研究者使用了“无效模式”（null pattern）进行对比。结果显示，无效模式在SZ和HC之间既没有表现出组间差异，也没有区分SZ患者的能力 。这些结果证明了所识别的PRS模式在区分SZ和HC方面的特异性 。</p><p>此外，研究还评估了不同研究中心（site）作为潜在混杂因素的影响。当将不同中心视为分类目标时，分类准确率接近50%（随机水平），这表明研究中心并非当前SZ-HC分类分析中的主要混杂因素 。</p><h3 id="Prediction-of-cognition-and-symptom-for-SZ"><a href="#Prediction-of-cognition-and-symptom-for-SZ" class="headerlink" title="Prediction of cognition and symptom for SZ"></a>Prediction of cognition and symptom for SZ</h3><p>该研究进一步探讨了先前识别的<strong>四种平均PRS（多基因风险评分）相关脑特征</strong>对精神分裂症 (SZ) 患者认知和症状的预测能力 。研究人员使用COBRE队列的数据为每个认知和症状领域构建了多元线性回归模型 。随后，这些<strong>在COBRE队列上训练好的模型和相同的感兴趣区域 (ROI) 被用于预测fBIRN和BSNIP队列中SZ患者的认知及症状指标，以评估模型的泛化能力</strong> 。</p><p><img src="/../image/MCCAR_jICA/image-20250521160551556.png" alt="多元线性回归模型"></p><p>预测性能通过计算预测值与真实值之间的相关性来评估 。结果显示，这四种PRS相关脑特征成功地预测了所有三个独立SZ队列（COBRE、BSNIP-1、fBIRN）中的注意力、工作记忆、综合认知得分以及PANSS（阳性与阴性症状量表）阴性症状得分 。</p><p><img src="/../image/MCCAR_jICA/image-20250521160638883.png" alt="Prediction results for cognition and symptom across BSNIP-1, fBIRN and COBRE based on the identified PRS-associated features."></p><p>具体的Pearson相关系数 (r) 如下：</p><ul><li>COBRE队列：综合认知r&#x3D;0.54，注意力r&#x3D;0.52，工作记忆r&#x3D;0.53，PANSS阴性症状r&#x3D;0.48 。</li><li>BSNIP-1队列：综合认知r&#x3D;0.44，注意力r&#x3D;0.49，工作记忆r&#x3D;0.52，PANSS阴性症状r&#x3D;0.49 。</li><li>fBIRN队列：综合认知r&#x3D;0.51，注意力r&#x3D;0.44，工作记忆r&#x3D;0.55，PANSS阴性症状r&#x3D;0.51 。</li></ul><p>MPRC队列因为缺乏相关的症状和认知数据，未被纳入此次预测分析 。值得注意的是，尽管三个队列使用了不同的认知评估工具（BSNIP-1使用BACS；fBIRN使用CMINDS；COBRE使用MCCB），这些PRS相关特征仍然显示出预测能力 。</p><h3 id="Specificity-of-PRS-pattern-among-psychosis-and-their-relatives"><a href="#Specificity-of-PRS-pattern-among-psychosis-and-their-relatives" class="headerlink" title="Specificity of PRS pattern among psychosis and their relatives"></a>Specificity of PRS pattern among psychosis and their relatives</h3><p>为了检验先前识别的PRS（多基因风险评分）衍生脑模式是否也存在于其他精神病性障碍中，研究人员在BSNIP-1队列中，比较了精神分裂症 (SZ, N&#x3D;178)、分裂情感性障碍 (SAD, N&#x3D;134)、精神病性双相障碍 (BP, N&#x3D;143)、健康对照组 (HC, N&#x3D;220) 以及这三类患者的一级亲属（分别为SZR, N&#x3D;162; SADR, N&#x3D;149; BPR, N&#x3D;142）之间四种PRS相关脑特征（fALFF正&#x2F;负网络，GMV正&#x2F;负网络）的差异 。所有比较在校正了地点效应后进行 。</p><img src="../image/MCCAR_jICA/image-20250521161256174.png" alt="Group differences of the identified PRS-associated pattern within psychosis." style="zoom:50%;" /><p>结果显示：</p><ul><li>对于fALFF（功能磁共振成像特征），精神病性障碍患者组（SZ、SAD、BP）及其亲属组（SZR、SADR、BPR）在正相关和负相关网络中的fALFF值均低于健康对照组（HC） 。</li><li>对于sMRI（结构磁共振成像特征），与健康对照组（HC）相比，精神分裂症患者（SZ）和分裂情感性障碍患者的亲属（SADR）在正相关和负相关网络中的灰质体积（GMV）均显著减少 。</li></ul><h3 id="Specificity-of-PRS-pattern-among-SZ-ASD-MDD-and-ADHD"><a href="#Specificity-of-PRS-pattern-among-SZ-ASD-MDD-and-ADHD" class="headerlink" title="Specificity of PRS pattern among SZ, ASD, MDD, and ADHD"></a>Specificity of PRS pattern among SZ, ASD, MDD, and ADHD</h3><p>为了进一步检验已识别的PRS（多基因风险评分）相关脑特征的特异性，研究人员还通过双样本t检验，测试了这些特征在区分其他神经精神&#x2F;心境障碍患者与健康对照组（HC）的能力 。</p><img src="../image/MCCAR_jICA/image-20250521161654398.png" alt="Group differences of the positive and negative PRS-associated networks between SZ and HC, between ASD and HC, between MDD and HC, between ADHD and HC." style="zoom:50%;" /><p>结果表明，对于患有自闭症谱系障碍（ASD, N&#x3D;421）、重度抑郁症（MDD, N&#x3D;260）和注意力缺陷&#x2F;多动障碍（ADHD, N&#x3D;346）的个体，他们所表现出的PRS相关额颞叶模式与其各自队列中的健康对照组相比，并无显著差异 。然而，该模式仅在精神分裂症（SZ）患者中显示出显著降低 。</p><p>文中还提到，关于SZ、ASD、MDD和ADHD之间的直接比较（通过方差分析ANOVA进行）可以在补充图17中找到 。</p><h2 id="方法与材料"><a href="#方法与材料" class="headerlink" title="方法与材料"></a>方法与材料</h2><h3 id="The-discovery-UKB-cohort"><a href="#The-discovery-UKB-cohort" class="headerlink" title="The discovery UKB cohort"></a>The discovery UKB cohort</h3><h2 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h2><h3 id="1-文章里面对于获取的脑模式有两种处理方式，一种是进行线性投射求Loading，另一种是求mask求平均值，为什么要这样处理？"><a href="#1-文章里面对于获取的脑模式有两种处理方式，一种是进行线性投射求Loading，另一种是求mask求平均值，为什么要这样处理？" class="headerlink" title="1. 文章里面对于获取的脑模式有两种处理方式，一种是进行线性投射求Loading，另一种是求mask求平均值，为什么要这样处理？"></a>1. 文章里面对于获取的脑模式有两种处理方式，一种是进行线性投射求Loading，另一种是求mask求平均值，为什么要这样处理？</h3><p>在神经影像分析中，选择使用“线性投影求loading”还是“直接用mask求平均值”取决于研究的具体目的和分析阶段。这两种方法有不同的应用场景和依据：</p><ol><li><strong>线性投影求Loading (成分载荷&#x2F;权重)：</strong><ul><li>目的：<ul><li>验证或复制一个已识别的复杂空间模式（component&#x2F;network map）在另一个独立样本中的表达强度，并考察这种表达强度是否与某个变量（如PRS）相关。</li><li>当研究者通过数据驱动的方法（如独立成分分析ICA、主成分分析PCA或文中的融合分析）识别出一个包含多个脑区、具有特定空间分布的脑网络或模式时，这个模式是一个整体。</li><li>为了在新的被试数据中量化这个“整体模式”的强度或“存在感”，就需要将这个已知的空间模式（通常是一个权重向量或图谱）“投影”到新被试的脑影像数据上。</li></ul></li><li><strong>方法</strong>：线性投影通常是通过计算新被试的脑影像数据（例如，一个向量化的全脑fALFF图）与已识别的空间模式图谱之间的点积（dot product）或其他类似的线性组合。结果得到一个单一的数值，即“loading”或“成分得分”，代表该被试在多大程度上表现出这个特定的空间模式。</li><li>依据&#x2F;优势：<ul><li>能够捕捉整个复杂空间模式的综合信息，而不仅仅是单个区域。</li><li>适用于检验一个先前发现的、由多个区域共同构成的功能或结构模式是否在新的数据中稳定存在，并与特定指标相关。</li><li>在文中，当他们将在UKB健康人群中识别的“PRS空间图谱”应用到独立的精神分裂症(SZ)患者队列中，并考察其与PRS的相关性时，就使用了线性投影来获得每个SZ患者在该PRS相关模式上的loading值 。</li></ul></li></ul></li><li><strong>用Mask求区域平均值：</strong><ul><li>目的：<ul><li>比较不同组别（如SZ vs. HC）在与PRS模式相关的特定脑区（由该模式定义）内的平均脑活动或结构是否存在差异。</li><li>提取简化的、具有生物学意义的特征用于分类或预测模型。</li></ul></li><li>方法：<ul><li>首先，基于先前识别的PRS相关脑模式图谱（通常是Z值图谱），通过设定阈值（如Z&gt;0为正相关网络，Z&lt;0为负相关网络）来创建二值化或多值的“掩模”（mask）或“感兴趣区域”（ROI） 。这些掩模定义了具体的脑区范围。</li><li>然后，对于每一个被试，计算其脑影像数据（如fALFF图或GMV图）在这些预先定义的掩模区域内的信号平均值 。</li></ul></li><li>依据&#x2F;优势：<ul><li>简化数据和提高解释性：将复杂的全脑模式简化为少数几个关键区域的平均信号，更易于进行组间比较和生物学解释。例如，可以直接说“SZ患者在PRS正相关网络的平均fALFF值显著低于HC” 。</li><li>降低特征维度：对于分类和预测任务，使用少数几个区域的平均值作为特征，可以有效降低模型的复杂性，减少过拟合的风险，并可能提高模型的泛化能力 。文中明确提到，提取了4个PRS相关的脑特征（fALFF_positive, fALFF_negative, GMV_positive, GMV_negative）用于后续的组间比较、分类和预测分析 。</li><li><strong>特异性分析</strong>：允许研究者更细致地考察模式中不同部分（如正相关部分和负相关部分）的效应。</li></ul></li></ul></li></ol><p><strong>总结与依据选择：</strong></p><ul><li><strong>当需要评估一个复杂的、数据驱动发现的整体脑模式在个体中的表达强度，并将其与外部变量关联时（尤其是在验证&#x2F;复制阶段）</strong>，倾向于使用“线性投影求loading”。这能反映个体对整个模式的“贡献”或“符合程度”。</li><li><strong>当需要进行组间比较，或者为机器学习模型（分类、预测）提取更稳定、更易解释、维度更低的特征时，且这些特征应基于先前发现的模式所指示的关键区域时</strong>，倾向于使用“mask求区域平均值”。这种方法将关注点从整个模式的抽象表达转移到模式中具体解剖或功能区域的量化指标上。</li></ul><p>研究者会根据研究的不同阶段和具体科学问题来选择合适的方法。在本文中，两种方法都被恰当地用于回答不同的研究问题：线性投影用于验证PRS与脑模式的<strong>关联</strong>在患者中的可重复性 ；而基于mask的区域平均值则用于更细致地比较SZ与HC在这些PRS定义区域的<strong>差异</strong> ，并作为<strong>特征</strong>进行分类和预测 。</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>PRS</tag>
      
      <tag>UKB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【论文阅读】人类大脑线粒体呼吸能力与多样性图谱</title>
    <link href="/2025/05/11/HumanMitoBrainMap/"/>
    <url>/2025/05/11/HumanMitoBrainMap/</url>
    
    <content type="html"><![CDATA[<p>最近在阅读一篇发表在Nature上的一篇文章，文章标题名为《<a href="https://www.nature.com/articles/s41586-025-08740-6">A human brain map of mitochondrial respiratory capacity and diversity</a>》，这是一篇我将在研究小组组会上进行分享的文章，进行了精读，同时加入个人总结与思考做成笔记文档，现整理后post到个人博客。文章完整翻译见<a href="https://zhuanlan.zhihu.com/p/1889618361366852173">知乎</a>。</p><p><img src="/../image/HumanMitoBrainMap/image-20250511195349335.png" alt="文章标题与相关信息"></p><h2 id="一、摘要"><a href="#一、摘要" class="headerlink" title="一、摘要"></a>一、摘要</h2><p>以往研究已经得出：</p><ol><li>线粒体的氧化磷酸化（OXPHOS）为大脑活动提供了能量或者动力；</li><li>线粒体缺陷与神经退行性疾病和神经精神疾病有关。</li></ol><p><strong>思路</strong>：想要理解大脑活动与人类行为的<strong>基础</strong>，可以从大脑的分子层面的能量景观进行研究（molecular energetic landscape）。</p><p>**方法：**为了弥补宏观（认知神经科学）与微观（细胞生物学）之间的尺度差距，文章开发了一种方法：<strong>物理体素化</strong>（physical voxelization）(像素化？)。</p><blockquote><p>We developed a physical voxelization approach to partition a frozen human coronal hemisphere section into 703 voxels comparable to neuroimaging resolution (3 × 3 × 3 mm).</p></blockquote><p>这种方法将将一个冷冻的人脑冠状半球切片分割成了703个和神经成像分辨率（3×3×3mm）相当的体素。（注意：冠状、半球切片，我本来以为切了整个大脑😀）。</p><p>切成小小丁（体素）后，作者在大脑的每一个皮层和皮层下体素中，对<strong>线粒体的多种表型特征</strong>进行了分析，这些特征包括：氧化磷酸化（OXPHOS）酶的活性、线粒体DNA含量与体积密度，以及线粒体特有的呼吸能力（有点理不清？）。</p><p><strong>结果：<strong>作者在对这些线粒体的表型特征结果分析后，发现</strong>人类大脑中存在着由脑区拓扑结构和细胞类型共同决定的多样化线粒体表型</strong>。</p><ol><li>与白质相比，灰质所含的线粒体要多出50%以上。</li><li>不仅如此，灰质中的线粒体在生物化学特性上更适应能量转换的需求，这种优化在近期进化形成的大脑皮层区域尤为明显。</li></ol><blockquote><p>Compared with white matter, grey matter contains &gt;50% more mitochondria. Moreover, the mitochondria in grey matter are biochemically optimized for energy transformation, particularly among recently evolved cortical brain regions.</p></blockquote><p><strong>延申</strong>：依靠得取到的数据，作者**创建了一个反向线性回归模型，该模型整合了多种神经成像模态，以生成线粒体分布与特化（specialization）的全脑图谱。**该模型还成功预测了来自同一捐献者大脑内一个独立脑区的线粒体特征（不验证谁敢信。。。）。</p><p><strong>意义</strong>：**这种方法（物理体素化）以及由此产生的线粒体表型MitoBrainMap（线粒体脑图谱）**为探索支撑正常大脑功能的分子能量景观提供了一个基础。这项资源（<a href="http://humanmitobrainmap.bcblab.com/">链接在这</a>）也与神经成像数据相关联，并为与神经精神和神经退行性疾病相关的区域化大脑过程界定了亚细胞基础。</p><hr><p>看完摘要感悟一下:sunglasses:：研究思路不复杂，但是实验数据很珍贵以及方法很有意义。赞赞赞👍</p><hr><h2 id="二、介绍"><a href="#二、介绍" class="headerlink" title="二、介绍"></a>二、介绍</h2><h3 id="1-线粒体与大脑功能关系"><a href="#1-线粒体与大脑功能关系" class="headerlink" title="1. 线粒体与大脑功能关系"></a>1. 线粒体与大脑功能关系</h3><ol><li><strong>现有脑成像技术的局限性</strong>：目前的功能性神经影像技术（比如核磁共振MRI）可以捕捉到大脑的电活动、代谢和血流等能量状态的变化。但是，这些都只是间接的测量，并不能直接反映细胞内部更微观层面（亚细胞层面）的生物能量转换过程。</li><li><strong>线粒体的核心作用——能量工厂</strong>：所有大脑的基础活动和因活动产生的过程，都依赖于细胞的能量转换，也就是生物能量学。这个过程的核心是三磷酸腺苷（ATP）的合成，主要由细胞内数以万亿计的线粒体通过**氧化磷酸化（OXPHOS）**来完成。每个神经元和神经胶质细胞都含有成百上千个这样的“能量工厂”。</li><li><strong>线粒体的多功能性</strong>：线粒体不仅为大脑活动提供必需的能量，它们还经过特化以满足特定的细胞需求，并指导亚细胞活动。除了能量供应，线粒体还参与许多其他关键功能，比如细胞间的信号传递、调控神经元的兴奋性、神经递质的释放以及调节炎症过程。</li><li><strong>线粒体与大脑网络及认知行为</strong>：因此，线粒体在整个大脑的大尺度网络中扮演着至关重要的支持角色。近期的机理研究也强调了线粒体对认知和行为的影响。</li><li><strong>研究中的尺度鸿沟</strong>：然而，目前研究线粒体主要是在细胞生物学的亚微米（非常微小）尺度上进行的。而认知神经科学和系统神经科学，尤其是使用传统场强的磁共振成像（MRI）对全脑进行成像时，其操作尺度是在毫米级别。这两者之间存在巨大的方法学和概念上的尺度差距。</li><li><strong>核心挑战</strong>：这种尺度上的差距，成为了我们理解能量转换的线粒体在大脑结构中的空间分布，以及它们如何驱动和指导复杂人脑动态变化的一个主要障碍。</li></ol><p>简单来说，这段强调了<strong>线粒体是大脑功能的核心，不仅提供能量，还参与多种重要过程，但我们目前很难将微观的线粒体研究与宏观的大脑影像研究联系起来，这阻碍了我们更深入地理解大脑的工作机制。</strong></p><p>这里形成了<strong>能量-ATP-氧化磷酸化（OXPHOS）-线粒体</strong>的关系链:link::link:。</p><h3 id="2-现有的神经成像技术不足之处"><a href="#2-现有的神经成像技术不足之处" class="headerlink" title="2. 现有的神经成像技术不足之处"></a>2. 现有的神经成像技术不足之处</h3><p>1. </p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UkB_rs-fMRI_problems</title>
    <link href="/2025/05/10/UkB_rsfMRI_problems/"/>
    <url>/2025/05/10/UkB_rsfMRI_problems/</url>
    
    <content type="html"><![CDATA[<h2 id="rs-fMRI数据预处理时遇到的问题及解决方法"><a href="#rs-fMRI数据预处理时遇到的问题及解决方法" class="headerlink" title="rs-fMRI数据预处理时遇到的问题及解决方法"></a>rs-fMRI数据预处理时遇到的问题及解决方法</h2><p>解决了，无语了，之后再写</p>]]></content>
    
    
    <categories>
      
      <category>Data processing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UK Biobank</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UKB中rs-fMRI预处理指南（一）</title>
    <link href="/2025/05/09/HowToProcessUKBrsfMRIData/"/>
    <url>/2025/05/09/HowToProcessUKBrsfMRIData/</url>
    
    <content type="html"><![CDATA[<h3 id="数据介绍"><a href="#数据介绍" class="headerlink" title="数据介绍"></a>数据介绍</h3><p>依据UK Biobank官方mri数据介绍文件：<a href="https://biobank.ctsu.ox.ac.uk/crystal/crystal/docs/brain_mri.pdf">brain_mri.pdf</a>：</p><p><img src="/../image/HowToProcessUKBrsfMRIData/image-20250509171713847.png" alt="image-20250509171713847"></p><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><p>下面图片中文字来自于上述文件，是对英国生物银行 (UK Biobank) 项目中静息态功能性磁共振成像 (Resting-state functional MRI, rsfMRI) 采集参数和相关参考扫描的详细说明。</p><p><img src="/../image/HowToProcessUKBrsfMRIData/image-20250509171837507.png" alt="image-20250509171837507"></p><p>以下是各项参数的解释：</p><ul><li><p><strong><code>Resolution: 2.4x2.4x2.4 mm</code></strong></p><ul><li><strong>含义：</strong> 图像的空间分辨率。这意味着每个体素 (voxel，图像中的最小三维单位) 的大小是 2.4 mm×2.4 mm×2.4 mm。这是各向同性 (isotropic) 体素，即在所有三个维度上的分辨率都相同。</li></ul></li><li><p><strong><code>Field-of-view: 88x88x64 matrix</code></strong></p><ul><li><p>含义：</p><p> 视野 (Field-of-view, FOV) 和矩阵大小。</p><ul><li>这通常与分辨率结合起来理解。FOV指的是在每个维度上扫描覆盖的物理范围。这里的 “matrix” 指的是在每个维度上采集的数据点数（或体素数）。</li><li>例如，在相位编码方向和频率编码方向（通常是面内方向，in-plane），视野是 88 (体素)×2.4 mm&#x2F;体素&#x3D;211.2 mm。</li><li>在层面选择方向（slice direction），视野是 64 (体素&#x2F;层面数)×2.4 mm&#x2F;体素&#x3D;153.6 mm。所以这里有64个层面。</li></ul></li></ul></li><li><p><strong><code>Duration: 6 minutes (490 timepoints)</code></strong></p><ul><li><strong>含义：</strong> rsfMRI扫描的总持续时间是6分钟。</li><li>在这6分钟内，总共采集了490个时间点 (timepoints) 或称为脑体积 (volumes)。每个时间点都是一次全脑扫描。</li></ul></li><li><p><strong><code>TR: 0.735 s</code></strong></p><ul><li><strong>含义：</strong> 重复时间 (Repetition Time, TR)。这是采集一个完整脑体积所需的时间。这里是0.735秒。</li><li>可以验证一下：490 timepoints×0.735 s&#x2F;timepoint≈360 秒，即6分钟。这与上面的持续时间相符。</li></ul></li><li><p><strong><code>TE: 39ms</code></strong></p><ul><li><strong>含义：</strong> 回波时间 (Echo Time, TE)。这是射频脉冲激发后到信号被采集之间的时间。这里是39毫秒。对于3T扫描仪的BOLD fMRI（血氧水平依赖功能磁共振成像），这是一个典型的TE值，以获得对血氧变化的良好敏感性。</li></ul></li><li><p><strong><code>GE-EPI with x8 multislice acceleration, no iPAT, flip angle 52°, fat saturation</code></strong></p><ul><li><p>含义：</p><p> 这是关于扫描序列和技术的详细描述：</p><ul><li><strong><code>GE-EPI</code></strong>: 梯度回波平面成像 (Gradient-Echo Echo-Planar Imaging)。这是fMRI常用的快速成像序列。</li><li><strong><code>with x8 multislice acceleration</code></strong>: 使用了8倍的多层面加速技术。这通常指的是<strong>多带 (Multiband, MB) 技术</strong>，允许同时激发和采集8个层面，从而大大缩短了TR。</li><li><strong><code>no iPAT</code></strong>: 没有使用iPAT (integrated Parallel Acquisition Techniques，集成的并行采集技术，是西门子对并行成像技术的称呼，如GRAPPA或SENSE类技术)。这意味着加速主要依赖于多带技术，而不是面内的并行成像加速。</li><li><strong><code>flip angle 52°</code></strong>: 翻转角是52度。这是射频脉冲将组织的净磁化矢量翻转的角度。这个角度通常针对特定的TR和组织特性进行优化，以最大化BOLD信号。</li><li><strong><code>fat saturation</code></strong>: 使用了脂肪抑制技术。这有助于消除由身体其他部位（如头皮）的脂肪信号引起的伪影，提高脑部图像的质量。</li></ul></li></ul></li><li><p><strong><code>As implemented in the CMRR multiband acquisition, a separate &quot;single-band reference scan&quot; is also acquired. This has the same geometry (including EPI distortion) as the timeseries data, but has higher between-tissue contrast to noise, and is used as the reference scan in head motion correction and alignment to other modalities.</code></strong></p><ul><li><p>含义：</p><p> 这段话解释了除了主要的rsfMRI时间序列数据外，还会采集一个额外的参考扫描。</p><ul><li><p><strong><code>CMRR multiband acquisition</code></strong>: 指的是由CMRR (Center for Magnetic Resonance Research, University of Minnesota) 开发的多带采集序列，这是UK Biobank所使用的。</p></li><li><p><strong><code>separate &quot;single-band reference scan&quot; (SBRef)</code></strong>: 会额外采集一个单带参考扫描（没有多带加速）。</p></li><li><p><strong><code>same geometry (including EPI distortion) as the timeseries data</code></strong>: 这个SBRef图像具有与主要fMRI时间序列数据相同的几何形状和空间畸变特性（由EPI序列的磁敏感性伪影引起）。这一点很重要，因为它使得SBRef可以很好地与fMRI数据对齐。</p></li><li><p><strong><code>higher between-tissue contrast to noise</code></strong>: 相比于快速采集的多带fMRI数据，SBRef图像具有更高的组织间对比度和信噪比。这使得脑组织结构（如灰质和白质的边界）更清晰。</p></li><li><p><code>used as the reference scan in head motion correction and alignment to other modalities</code></p><p>: 这个高质量的SBRef图像主要用于以下目的：</p><ul><li><strong>头部运动校正</strong>：作为fMRI时间序列数据进行运动校正时的参考图像。</li><li><strong>与其他模态对齐</strong>：帮助将fMRI数据与结构像（如T1加权像）或其他模态的图像进行配准对齐。因为它的对比度比单个fMRI时间点更好，所以配准效果也更好。</li></ul></li></ul></li></ul></li></ul><p>总结来说，这段文字描述了一个先进的、快速的rsfMRI采集方案，使用了<strong>多带加速技术</strong>以实现短TR，从而获得较高的时间分辨率。同时，通过采集一个高质量的单带参考图像（SBRef）来辅助后续的数据处理，特别是运动校正和图像配准，以提高整体数据质量和分析的准确性。这些都是UK Biobank项目中为了获取高质量大规模脑成像数据所采用的关键技术。</p><hr><p><strong>注意到</strong>：数据采用了<strong>多带加速技术</strong>，该技术可以同时激发多个层面，以缩短扫面时间，但是博主之前预处理的数据一般是传统的 <strong>“sequential” (顺序采集)</strong> 或 <strong>“interleaved” (隔层采集)</strong> ，因此如何进行时间层的校正为博主考虑的首要问题。</p><hr><h4 id="数据参数"><a href="#数据参数" class="headerlink" title="数据参数"></a>数据参数</h4><p>查看.nii数据参数列表：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;Manufacturer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Siemens&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ManufacturersModelName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Skyra&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ImageType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;ORIGINAL&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;PRIMARY&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;M&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;MB&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;ND&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;MOSAI&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;AcquisitionTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">170638.635000</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;AcquisitionDate&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20180523</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;MagneticFieldStrength&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;FlipAngle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">51</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;EchoTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.0424</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;RepetitionTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.735</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;EffectiveEchoSpacing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.000639989</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;SliceTiming&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.2675</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.535</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.0875</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.3575</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.625</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.1775</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.445</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.2675</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.535</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.0875</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.3575</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.625</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.1775</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.445</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.2675</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.535</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.0875</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.3575</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.625</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.1775</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.445</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.2675</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.535</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.0875</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.3575</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.625</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.1775</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.445</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.2675</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.535</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.0875</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.3575</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.625</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.1775</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.445</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.2675</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.535</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.0875</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.3575</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.625</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.1775</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.445</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.2675</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.535</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.0875</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.3575</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.625</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.1775</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.445</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.2675</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.535</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.0875</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.3575</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.625</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.1775</span><span class="hljs-punctuation">,</span><br><span class="hljs-number">0.445</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;PhaseEncodingDirection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;j-&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>下面是每个参数的解释：</p><ul><li><p><strong><code>Manufacturer</code></strong>: “Siemens”</p><ul><li><strong>含义</strong>: 指MRI扫描仪的制造商是西门子公司。</li></ul></li><li><p><strong><code>ManufacturersModelName</code></strong>: “Skyra”</p><ul><li><strong>含义</strong>: 指西门子公司制造的MRI扫描仪的具体型号是Skyra。这是一款常见的3特斯拉MRI扫描仪。</li></ul></li><li><p><strong><code>ImageType</code></strong>: <code>[&quot;ORIGINAL&quot;, &quot;PRIMARY&quot;, &quot;M&quot;, &quot;MB&quot;, &quot;ND&quot;, &quot;MOSAIC&quot;]</code></p><ul><li><p>含义</p><p>: 这是一个数组，描述了图像的多个特性：</p><ul><li><strong><code>ORIGINAL</code></strong>: 表示这是原始采集的数据，未经过重要修改或二次处理。</li><li><strong><code>PRIMARY</code></strong>: 表示这是主要的、首要的图像系列，而不是例如衍生的或计算出的图像（如参数图）。</li><li><strong><code>M</code></strong>: 通常指“Magnitude”（幅度图像）。在复数MRI信号中，幅度和相位图像都可以生成，幅度图像是最常用的。</li><li><strong><code>MB</code></strong>: 代表“Multi-Band”（多带技术）。这是一种加速fMRI采集的技术，允许同时激发和采集多个脑片（slices）的数据，从而显著缩短每个全脑容积的采集时间（TR）。</li><li><strong><code>ND</code></strong>: 通常代表“No Distortion Correction”（未进行畸变校正）或在某些情况下可能指“Normalized”（归一化）。在BIDS上下文中，如果图像已经过畸变校正，通常会有特定的字段或文件名来指明。考虑到这是原始数据参数，”No Distortion Correction” 更为可能，意味着这些是原始采集的、可能存在磁敏感伪影导致几何畸变的图像。</li><li><strong><code>MOSAIC</code></strong>: 表示图像数据在存储时是以“马赛克”格式排列的。在这种格式中，一个二维图像文件实际上包含了多个脑片拼接在一起形成一个大的二维阵列。现代处理软件通常会自动处理这种格式。</li></ul></li></ul></li><li><p><strong><code>AcquisitionTime</code></strong>: <code>100156.227500</code></p><ul><li><strong>含义</strong>: 数据采集开始的时间。格式通常是 <code>HHMMSS.fractional_seconds</code>。所以，这里表示采集开始于上午10点01分56.227500秒。</li></ul></li><li><p><strong><code>AcquisitionDate</code></strong>: <code>20180306</code></p><ul><li><strong>含义</strong>: 数据采集的日期。格式是 <code>YYYYMMDD</code>。所以，这里表示采集日期是2018年3月6日。</li></ul></li><li><p><strong><code>MagneticFieldStrength</code></strong>: <code>3</code></p><ul><li><strong>含义</strong>: MRI扫描仪主磁场的强度，单位是特斯拉 (Tesla, T)。这里是3T，是神经影像研究中常用的场强。</li></ul></li><li><p><strong><code>FlipAngle</code></strong>: <code>51</code></p><ul><li><strong>含义</strong>: 翻转角，单位是度 (°)。这是射频脉冲将质子从纵向磁化方向翻转的角度。对于梯度回波序列（fMRI常用），这个角度的选择会影响图像对比度和信噪比。51度是一个针对特定TR和组织类型优化过的值，以获得较好的BOLD信号。</li></ul></li><li><p><strong><code>EchoTime</code> (TE)</strong>: <code>0.0424</code></p><ul><li><strong>含义</strong>: 回波时间，单位是秒 (s)，所以这里是42.4毫秒 (ms)。TE是指射频激发脉冲中心到回波信号峰值中心之间的时间。对于BOLD fMRI，TE的选择对血氧效应的敏感性至关重要，3T下通常在25-45ms之间。</li></ul></li><li><p><strong><code>RepetitionTime</code> (TR)</strong>: <code>0.735</code></p><ul><li><strong>含义</strong>: 重复时间，单位是秒 (s)，所以这里是735毫秒 (ms)。TR是指在序列中连续两次激发相同脑片之间的时间间隔，也即采集一个完整脑体积数据所需的时间。0.735s是一个非常快的TR，这得益于上面提到的多带技术 (MB)。</li></ul></li><li><p><strong><code>EffectiveEchoSpacing</code></strong>: <code>0.000639989</code></p><ul><li><strong>含义</strong>: 有效回波间距，单位是秒 (s)，所以这里是0.639989毫秒 (ms)。这个参数在EPI (Echo Planar Imaging) 序列中非常重要，它表示在k空间中采集相邻相位编码线之间的时间。它与图像的带宽、几何畸变程度以及用于畸变校正的计算有关。</li></ul></li><li><p><strong><code>SliceTiming</code></strong>: <code>[0, 0.2675, 0.5375, ... , 0.4475]</code> (列表很长)</p><ul><li><p>含义</p><p>: 这是一个数组，列出了每个脑片 (slice) 相对于TR开始时刻的实际采集时间点，单位是秒 (s)。</p><ul><li>这些数值对于进行“层时间校正”（Slice Timing Correction）非常关键，因为fMRI中一个脑体积内的不同脑片不是完全同时采集的。</li><li>列表中数值的模式可以揭示脑片的采集顺序（例如，顺序采集、升序或降序的交错采集、多带交错采集）。注意到列表中有多个0，并且数值在0到接近TR (0.735s)但小于TR的一个较小值 (0.625s) 之间重复出现，这进一步证实了多带采集的使用。例如，多个脑片可能在时间点0被同时采集，然后下一组脑片在0.09s被同时采集，以此类推。具体来说，相同的采集时间点重复出现的次数暗示了多带因子（即同时采集的slice数量）。在这个例子中，0, 0.09, 0.18, 0.2675, 0.3575, 0.4475, 0.5375, 0.625 可能是8个不同的采集时间点，如果每个时间点对应多个slice，例如每个时间点采集6个slice，那么这个序列可能是一个MB因子为6，8个slice “包” (slice groups or bands) 的采集序列。</li></ul></li></ul></li><li><p><strong><code>PhaseEncodingDirection</code></strong>: <code>&quot;j-&quot;</code></p><ul><li><p>含义: 相位编码方向。在MRI中，图像的空间编码在三个逻辑方向上进行：层面选择 (slice selection)、频率编码 (frequency encoding) 和相位编码 (phase encoding)。相位编码方向是图像中最容易受到磁敏感伪影、运动伪影和化学位移伪影影响的方向。</p><ul><li><code>&quot;j-&quot;</code> 通常表示在BIDS规范中，相位编码方向是沿着Y轴的负方向。在典型的头颅成像中，这通常对应于<strong>后-&gt;前 (Posterior-to-Anterior, P&gt;&gt;A)</strong> 的方向。了解这个信息对于畸变校正（例如使用反向相位编码方向的“blip-up&#x2F;blip-down”技术）非常重要。</li></ul></li></ul></li></ul><p>总结来说，这些参数表明这是一次在西门子Skyra 3T扫描仪上进行的、使用了<strong>多带技术</strong>的快速静息态fMRI扫描，采集日期是2018年3月6日，相位编码方向为Y轴负方向。<code>SliceTiming</code> 提供了进行精确的层时间校正所需的信息。这些都是进行fMRI数据预处理和分析时的关键参数。</p><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>&#x3D;&#x3D;<em><strong>所以，多带采集在dpabi中怎么进行时间层校正？</strong></em>&#x3D;&#x3D;</p><p>现在对在DPABI中为多带采集 (Multi-Band) 的rsfMRI数据进行时间层校正 (Slice Timing Correction, STC) 的步骤总结：</p><ol><li><p><strong>准备关键信息 (Preprocessing Preparation):</strong></p><ul><li><code>SliceTiming</code> 数组: 这是最重要的信息。从与fMRI数据 (<code>.nii</code>或&#96;&#96;&#96;</li></ul></li></ol><p>.nii.gz<code>) 配套的JSON文件 (</code>_bold.json<code>) 中找到并复制完整的</code>SliceTiming&#96;&#96;&#96;数组。这个数组精确定义了每个层面相对于TR开始的采集时间（单位：秒），其顺序与NIfTI图像中层面的存储顺序一致。</p><ul><li><em>例如，提供的包含64个时间值的数组。</em><ul><li><code>TR</code> (Repetition Time, 重复时间)<br>: 明确扫描TR值（单位：秒）。<ul><li><em>例如，0.735秒。</em></li></ul></li><li><code>Number of Slices</code> (层面数量)<br>: 明确fMRI图像包含的总层面数。<ul><li><em>例如，64个层面。</em></li></ul></li></ul></li></ul><ol start="2"><li><p><strong>在DPABI中配置时间层校正参数:</strong></p><ul><li><strong>启动DPABI</strong> 并进入相应的预处理流程配置界面（如DPARSF的基础预处理流程，或DPABISurf的相关模块）。</li><li>找到**“Slice Timing”** (或类似名称，如“层时间校正”、“Time Course Correction”) 的设置部分。</li><li>设置以下参数：<ul><li><strong><code>Number of Slices</code> (层面数量)</strong>: 确保DPABI识别的层面数与数据一致 (例如，64)。通常DPABI会自动从图像头文件读取。</li><li><strong><code>TR (s)</code> (重复时间，秒)</strong>: 确保TR值设置正确 (例如，0.735)。通常DPABI也会自动读取。</li><li><code>Slice Order</code> &#x2F; <code>Slice timing (vector in s)</code> (层面顺序 &#x2F; 层面时间向量，秒):<ul><li>这是<strong>最关键</strong>的一步。对于多带数据，<strong>不要选择</strong> “sequential” (顺序) 或 “interleaved” (隔层) 等预设选项(dpabi没有)。</li><li>需要选择一个允许<strong>手动输入或加载自定义层面时间向量</strong>的选项 (例如，”User-defined Slice Order”, “Custom”, 或直接粘贴数值的输入框)。</li><li>将步骤1中准备好的<strong>完整<code>SliceTiming</code>数组</strong>（确保是秒为单位，并且数值顺序正确）输入到此处。DPABI可能允许直接粘贴空格或逗号分隔的数值，或者加载一个包含这些数值的文本文件。</li></ul></li><li><code>Reference Slice</code> (参考层面) &#x2F; <code>Reference Time (s)</code> (参考时间，秒):<ul><li>这是我们希望将所有其他层面校正到的时间点。</li><li>一个常用的方法是选择TR中间时刻采集的层面作为参考。计算 <code>TR / 2</code> (例如, 0.735s&#x2F;2&#x3D;0.3675s)。</li><li>查看<code>SliceTiming</code>数组中的独特采集时间点，找到最接近<code>TR/2</code>的那个时间值 (例如，在数据中，<code>0.3575s</code> 最接近 <code>0.3675s</code>)。</li><li>在DPABI中，可以通过指定<strong>参考层面的索引号</strong> (例如，在SliceTiming<code>数组中，第一个值为</code>0.3575s<code>的层面索引，通常从0或1开始计数，具体看DPABI的说明) 或直接输入**参考时间** (例如，</code>0.3575s&#96;，如果软件支持) 来设定参考层面。</li></ul></li></ul></li></ul></li><li><p><strong>执行校正:</strong></p><ul><li>仔细检查所有参数设置无误后，保存配置。</li><li>运行DPABI的预处理流程，时间层校正步骤将根据提供的精确层面时间信息进行。</li></ul></li></ol><p><strong>核心要点总结:</strong></p><ul><li>对于多带采集数据，<strong>必须使用从JSON文件获取的精确<code>SliceTiming</code>数组</strong>，而不是依赖简化的层面顺序假设。</li><li>在DPABI中，确保将此<code>SliceTiming</code>数组正确输入到允许自定义层面时间的选项中。</li><li>正确设置TR、层面数和选择一个合适的参考层面。</li></ul><p>通过以上步骤，DPABI就能够利用每个层面准确的采集时间信息，为多带rsfMRI数据执行有效的时间层校正。</p><h3 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h3><p>基于.nii数据参数列表：</p><p>这个<code>SliceTiming</code>数组以及提供的<code>RepetitionTime</code>和<code>EffectiveEchoSpacing</code>是进行时间层校正的关键参数。这个<code>SliceTiming</code>数组的模式与我们之前讨论的UK Biobank多带（Multi-Band, MB）数据非常相似，但数值上略有不同，这强调了<strong>始终使用与当前处理的特定扫描数据相对应的JSON文件中的确切<code>SliceTiming</code>值的重要性。</strong></p><p>让我们分析一下这个具体的数据：</p><ul><li><p><strong><code>&quot;RepetitionTime&quot;: 0.735</code></strong>: TR是0.735秒。</p></li><li><p><strong><code>&quot;EffectiveEchoSpacing&quot;: 0.000639989</code></strong>: 这个主要用于后续的畸变校正，不直接影响时间层校正的输入方式。</p></li><li><p><code>&quot;SliceTiming&quot;: [...]</code></p><p>:</p><ul><li><strong>长度</strong>: 数组包含64个值，对应64个层面。</li><li><strong>模式</strong>: 值 <code>0, 0.2675, 0.535, 0.0875, 0.3575, 0.625, 0.1775, 0.445</code> 在重复。</li><li><strong>多带信息</strong>: 这个重复的8个独特时间点模式表明这是一个**多带因子为8（MB&#x3D;8）**的采集序列。每个时间点同时采集了 64&#x2F;8&#x3D;8 个层面。</li><li><strong>TR兼容性</strong>: 数组中的最大时间值是 <code>0.625</code> 秒，这小于TR <code>0.735</code> 秒，是符合逻辑的。</li></ul></li></ul><p><strong>如何将这些参数输入到时间层校正中（例如在DPABI&#x2F;SPM中，参考spm截图信息）：</strong></p><ol><li><p><strong>准备信息：</strong></p><ul><li><strong>这个完整的 <code>SliceTiming</code> 数组</strong>（64个值，如上所示，单位：秒）。</li><li><strong><code>RepetitionTime</code> (TR)</strong>：<code>0.735</code> 秒。</li><li><strong>层面数量 (Number of Slices)</strong>：64。</li></ul></li><li><p><strong>在软件（如DPABI）中进行设置：</strong></p><ul><li><p><strong>打开时间层校正设置界面。</strong></p></li><li><p><strong>层面数量 (Number of Slices)</strong>：确保软件识别为 <code>64</code>。</p></li><li><p><strong>TR (Repetition Time)</strong>：确保软件设置为 <code>0.735</code> 秒。</p></li><li><p>层面顺序 (Slice Order) &#x2F; 层面时间向量 (Slice timing vector)：</p><ul><li><p>选择允许手动输入或加载自定义层面时间向量**的选项。</p></li><li><p>输入 <code>SliceTiming</code> 向量</p><p>：将提供的这64个时间值（</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>, <span class="hljs-number">0</span>.<span class="hljs-number">2675</span>, <span class="hljs-number">0</span>.<span class="hljs-number">535</span>, ... , <span class="hljs-number">0</span>.<span class="hljs-number">445</span><br></code></pre></td></tr></table></figure><p>）输入。</p><ul><li><p><strong>单位注意！</strong> 提供的<code>SliceTiming</code>数组是以**秒（s）<strong>为单位的。根据展示的截图 (<code>spm</code>)，软件（因为dpabi是通过调用spm的SliceTiming的函数进行校正的,SPM）在接受自定义层面时间向量时，可能期望以</strong>毫秒（ms）**为单位输入，并且参考时间也以毫秒为单位。如果软件界面明确要求毫秒，需要将<code>SliceTiming</code>数组中的每个值乘以1000（例如，0s -&gt; 0ms; 0.2675s -&gt; 267.5ms; 0.535s -&gt; 535ms; 0.0875s -&gt; 87.5ms，以此类推）。</p><p><img src="/../image/HowToProcessUKBrsfMRIData/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250509220615.png" alt="spm"></p></li><li><p><strong>格式</strong>：确保数值的输入格式符合软件要求（例如，空格分隔的数值串，或者从文本文件加载）。</p></li></ul></li></ul></li><li><p>参考时间 (Reference Time &#x2F; Reference Slice)：</p><ul><li>根据截图 <code>spm</code> 的提示：”If doing so [输入每个层面的时间], the next item (Reference Slice) will contain a reference time (in ms) instead of the slice index of the reference slice.” 这意味着当提供了完整的层面时间向量后，软件会要求输入一个<strong>参考时间（以毫秒为单位）</strong>。</li><li>计算参考时间：<ol><li>TR的中间点是 0.735 秒&#x2F;2&#x3D;0.3675 秒。</li><li>查看这个<code>SliceTiming</code>数组中的独特采集时间点（排序后）：<code>0, 0.0875, 0.1775, 0.2675, 0.3575, 0.445, 0.535, 0.625</code>。</li><li>最接近 <code>0.3675</code> 秒的是 <code>0.3575</code> 秒。</li><li>因此，参考时间应该是 <code>0.3575</code> 秒。如果软件要求毫秒，则输入 <strong><code>357.5</code> ms</strong>。</li></ol></li></ul></li></ul></li></ol><p><strong>总结输入步骤：</strong></p><ol><li>在DPABI（或其他软件）的时间层校正模块中：</li><li>确认<strong>层面数量</strong>为 <code>64</code>。</li><li>确认<strong>TR</strong>为 <code>0.735</code> 秒。</li><li>选择“自定义层面时间向量”的输入方式。</li><li>将提供的包含64个值的<code>SliceTiming</code>数组**（注意根据软件要求可能需要从秒转换为毫秒）**输入。</li><li>在“参考时间 (Reference Time)”字段，输入 <code>357.5</code> （如果单位是毫秒），或者 <code>0.3575</code> （如果单位是秒，但这不符合之前截图的提示）。</li></ol><p>通过这种方式，就能利用这份精确的层面时间信息为这个多带fMRI数据进行准确的时间层校正了。</p>]]></content>
    
    
    <categories>
      
      <category>Data Processing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UK Biokank</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Hexo 指南】巧用 Typora 实现图片路径的优雅管理</title>
    <link href="/2025/05/08/Image_Path_Configuration_Guide/"/>
    <url>/2025/05/08/Image_Path_Configuration_Guide/</url>
    
    <content type="html"><![CDATA[<p>在 Hexo 博客的日常维护中，图片路径管理无疑是一项既重要又时常引发困扰的任务。如何在本地使用 Typora 流畅写作，同时确保 Hexo 生成站点时图片链接准确无误，是许多博主追求的目标。本文旨在提供一种清晰的思路和实战方法，利用 Typora 的特性，配合合理的 Hexo 图片组织方式，实现“一次配置，长久省心”的图片管理体验。</p><hr><h2 id="痛点回顾：Hexo-图片路径为何令人迷惑？"><a href="#痛点回顾：Hexo-图片路径为何令人迷惑？" class="headerlink" title="痛点回顾：Hexo 图片路径为何令人迷惑？"></a>痛点回顾：Hexo 图片路径为何令人迷惑？</h2><p>Hexo 提供了 <code>post_asset_folder: true</code> 的配置，允许将图片存放在与文章同名文件夹中，并通过相对路径引用。</p><p><img src="/../image/Image_Path_Configuration_Guide/image-20250508205137298.png" alt="fig.1"></p><p>但是<code>hexo g</code>后，会发现，图片与由<code>.md</code>转化而来的<code>HTML</code>文件竟然在同一文件夹下，以至于原本设置好的相对路径无法使用，如图2：</p><p><img src="/../image/Image_Path_Configuration_Guide/image-20250508211015878.png" alt="fig.2"></p><hr><p>笔者思索良久。。。。。。</p><hr><h2 id="思考过程"><a href="#思考过程" class="headerlink" title="思考过程"></a>思考过程</h2><p>在学习了市面上的相关资料，并且AI助手反复沟通效果甚微后，灵光乍现💡：</p><p>由于笔者此前一直使用typora软件进行<code>md</code>笔记书写，而typora软件可以自行定义：</p><ol><li><p>图片是否复制；</p></li><li><p>图片复制路径；</p><p>如图3：</p></li></ol><p><img src="/../image/Image_Path_Configuration_Guide/image-20250508211431308.png" alt="fig.3"></p><p>基于此前知识以及博主智慧，将typora路径功能进行发展，最终实现:</p><ol><li><p><code>md</code>文件名与图片文件夹一一对应;</p></li><li><p>一次设置，终生质保的快捷处理方式。</p></li></ol><hr><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><ol><li><p><code>post_asset_folder: false</code>无需进行创建；</p></li><li><p>在<code>source</code>目录下建立<code>image</code>用于存放图片文件夹；</p><p><img src="/../image/Image_Path_Configuration_Guide/image-20250508212209100.png" alt="image-20250508212209100"></p></li><li><p>使用typora时，将图片偏好设置为：</p><p><img src="/../image/Image_Path_Configuration_Guide/image-20250508211431308.png" alt="image-20250508211431308"></p></li><li><p>设置完成<code>hexo clean &amp; hexo g</code>后<code>public</code>文件夹中生成<code>image</code>文件。</p></li><li><p><code>hexo s</code>显示成功。</p></li></ol><hr>]]></content>
    
    
    <categories>
      
      <category>技术指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Hexo</tag>
      
      <tag>Typora</tag>
      
      <tag>图片管理</tag>
      
      <tag>路径优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UKB数据提取</title>
    <link href="/2025/05/07/UKB_extraction/"/>
    <url>/2025/05/07/UKB_extraction/</url>
    
    <content type="html"><![CDATA[<h2 id="UKB数据提取"><a href="#UKB数据提取" class="headerlink" title="UKB数据提取"></a>UKB数据提取</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@415d37a2c97b:/opt/notebooks# <span class="hljs-built_in">cd</span> /mnt<br>root@415d37a2c97b:/mnt# <span class="hljs-built_in">cd</span> project<br>root@415d37a2c97b:/mnt/project# <span class="hljs-built_in">cd</span> *TA<br>root@415d37a2c97b:/opt/notebooks# <span class="hljs-built_in">cd</span> /mnt<br>root@415d37a2c97b:/mnt# <span class="hljs-built_in">cd</span> project<br>root@415d37a2c97b:/mnt/project# <span class="hljs-built_in">cd</span> *TA<br>root@415d37a2c97b:/opt/notebooks# <span class="hljs-built_in">cd</span> /mnt<br>root@415d37a2c97b:/mnt# <span class="hljs-built_in">cd</span> project<br>root@415d37a2c97b:/mnt/project# <span class="hljs-built_in">cd</span> *TA<br>root@415d37a2c97b:/mnt/project/GMV_DATA# <span class="hljs-built_in">cp</span> *.csv /opt/notebooks<br>root@415d37a2c97b:/mnt/project/GMV_DATA# <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入所需的库</span><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd  <span class="hljs-comment"># 用于读取表格数据</span><br><span class="hljs-keyword">import</span> os            <span class="hljs-comment"># 用于操作系统功能，如文件路径操作、遍历目录</span><br><span class="hljs-keyword">import</span> shutil        <span class="hljs-comment"># 用于文件操作，如复制文件</span><br><span class="hljs-keyword">import</span> sys           <span class="hljs-comment"># 用于系统相关功能，如退出脚本、标准错误输出</span><br><span class="hljs-keyword">import</span> math          <span class="hljs-comment"># 用于数学运算（如此处不需要，但有时可能有用）</span><br><br><span class="hljs-comment"># --- 配置设定 ---</span><br><br><span class="hljs-comment"># 1. 包含参与者ID和目标文件名的表格文件的路径</span><br><span class="hljs-comment">#    (请更新为您的表格文件的正确路径和名称)</span><br>participant_table_path = <span class="hljs-string">&#x27;Participant_table.csv&#x27;</span><br><br><span class="hljs-comment"># 2. 表格中包含目标 T1 .zip 文件名的列的名称</span><br><span class="hljs-comment">#    (请从您的表格文件 image_4b5fe0.jpg 中获取确切的列标题)</span><br><span class="hljs-comment">#    *** 请务必用您表格中确切的列名称更新此变量！ ***</span><br>filename_column = <span class="hljs-string">&#x27;T1 structural brain images - NIFTI | Instance 2&#x27;</span><br><br><span class="hljs-comment"># 3. 存放 T1 .zip 文件的基础源目录 (文件在其中的子文件夹内)</span><br>source_base_dir = <span class="hljs-string">&#x27;/mnt/project/Bulk/Brain MRI/T1/&#x27;</span><br><br><span class="hljs-comment"># 4. 您希望将找到的 .zip 文件复制到的 **基础** 目标目录</span><br><span class="hljs-comment">#    脚本会在此目录下创建 batch_001, batch_002 ... 等子文件夹</span><br>destination_base_dir = <span class="hljs-string">&#x27;./T1_NIFTI_Batched&#x27;</span> <span class="hljs-comment"># 修改基础目标目录名</span><br><br><span class="hljs-comment"># 5. 每个批次子文件夹中最多存放的文件数量</span><br>batch_size = <span class="hljs-number">100</span><br><br><span class="hljs-comment"># 6. 您的参与者表格文件的分隔符 (CSV 通常用逗号 &#x27;,&#x27;, TSV 通常用制表符 &#x27;\t&#x27;)</span><br>file_delimiter=<span class="hljs-string">&#x27;,&#x27;</span>  <span class="hljs-comment"># 默认使用逗号</span><br><span class="hljs-comment"># file_delimiter=&#x27;\t&#x27; # 如果是制表符分隔，请取消本行注释并注释掉上面一行</span><br><span class="hljs-comment"># --- 配置结束 ---</span><br><span class="hljs-comment"># --- 脚本主要逻辑 ---</span><br><span class="hljs-comment"># 尝试创建基础目标目录，如果它不存在的话</span><br><span class="hljs-keyword">try</span>:<br>    os.makedirs(destination_base_dir, exist_ok=<span class="hljs-literal">True</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;基础目标目录已创建或已存在: <span class="hljs-subst">&#123;destination_base_dir&#125;</span>&quot;</span>)<br><span class="hljs-keyword">except</span> OSError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;错误：无法创建基础目标目录 <span class="hljs-subst">&#123;destination_base_dir&#125;</span>: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>, file=sys.stderr)<br>    sys.exit(<span class="hljs-number">1</span>) <span class="hljs-comment"># 退出脚本</span><br>    <br><span class="hljs-comment"># 读取参与者表格，获取目标 .zip 文件列表</span><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;正在读取参与者表格: <span class="hljs-subst">&#123;participant_table_path&#125;</span>&quot;</span>)<br>    df = pd.read_csv(participant_table_path, delimiter=file_delimiter, dtype=<span class="hljs-built_in">str</span>)<br>    <span class="hljs-keyword">if</span> filename_column <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> df.columns:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;错误: 在文件 <span class="hljs-subst">&#123;participant_table_path&#125;</span> 中未找到列 &#x27;<span class="hljs-subst">&#123;filename_column&#125;</span>&#x27;&quot;</span>, file=sys.stderr)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;文件中包含的列有: <span class="hljs-subst">&#123;<span class="hljs-built_in">list</span>(df.columns)&#125;</span>&quot;</span>, file=sys.stderr)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请检查并更新脚本中的 &#x27;filename_column&#x27; 变量。&quot;</span>, file=sys.stderr)<br>        sys.exit(<span class="hljs-number">1</span>)<br>    target_files = <span class="hljs-built_in">set</span>(df[filename_column].dropna().unique())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;从表格中找到 <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(target_files)&#125;</span> 个唯一的目标 .zip 文件名。&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> target_files:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;警告：在指定列中未找到任何目标文件名。请检查列名和文件内容。&quot;</span>)<br>        sys.exit(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">except</span> FileNotFoundError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;错误: 参与者表格文件未找到，路径: <span class="hljs-subst">&#123;participant_table_path&#125;</span>&quot;</span>, file=sys.stderr)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请检查并更新脚本中的 &#x27;participant_table_path&#x27; 变量。&quot;</span>, file=sys.stderr)<br>    sys.exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;错误：读取参与者表格 <span class="hljs-subst">&#123;participant_table_path&#125;</span> 时出错: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>, file=sys.stderr)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请检查您的文件分隔符 &#x27;<span class="hljs-subst">&#123;file_delimiter&#125;</span>&#x27; 是否设置正确。&quot;</span>, file=sys.stderr)<br>    sys.exit(<span class="hljs-number">1</span>)<br>    <br><span class="hljs-comment"># 用于跟踪已成功复制的文件数量，以确定批次</span><br>files_copied_count = <span class="hljs-number">0</span><br><span class="hljs-comment"># 用于存储在源目录中实际找到并已处理的目标文件名，防止重复处理</span><br>files_processed = <span class="hljs-built_in">set</span>()<br><br><span class="hljs-comment"># 遍历源基础目录及其所有子目录</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n正在搜索目标文件于: <span class="hljs-subst">&#123;source_base_dir&#125;</span> 及其子目录...&quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 为了让批次稍微稳定些（虽然不保证全局有序），可以先收集所有找到的文件路径</span><br>    found_file_paths = &#123;&#125; <span class="hljs-comment"># 存储找到的文件名及其完整路径</span><br>    <span class="hljs-keyword">for</span> root, dirs, files_in_current_dir <span class="hljs-keyword">in</span> os.walk(source_base_dir):<br>        <span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> files_in_current_dir:<br>            <span class="hljs-keyword">if</span> file_name <span class="hljs-keyword">in</span> target_files:<br>                <span class="hljs-comment"># 如果同一个文件名在不同地方找到，保留第一个找到的路径（或根据需要选择逻辑）</span><br>                <span class="hljs-keyword">if</span> file_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> found_file_paths:<br>                    found_file_paths[file_name] = os.path.join(root, file_name)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;在源目录中初步定位到 <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(found_file_paths)&#125;</span> 个目标文件。开始复制并分批...&quot;</span>)<br><br>    <span class="hljs-comment"># 按文件名排序（可选，为了让处理顺序更确定）</span><br>    sorted_target_files_found = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">list</span>(found_file_paths.keys()))<br><br>    <span class="hljs-comment"># 遍历找到的目标文件进行复制和分批</span><br>    <span class="hljs-keyword">for</span> filename_to_copy <span class="hljs-keyword">in</span> sorted_target_files_found:<br>        <span class="hljs-comment"># --- 分批逻辑开始 ---</span><br>        <span class="hljs-comment"># 计算当前文件应该属于哪个批次 (从 1 开始计数)</span><br>        <span class="hljs-comment"># 使用 files_copied_count 来决定批次号</span><br>        batch_index = (files_copied_count // batch_size) + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 构建当前批次的子目录名称 (例如 batch_001, batch_002)，使用 3 位补零</span><br>        current_batch_subdir_name = <span class="hljs-string">f&quot;batch_<span class="hljs-subst">&#123;batch_index:03d&#125;</span>&quot;</span><br>        <span class="hljs-comment"># 构建当前批次的完整目录路径</span><br>        current_batch_dir = os.path.join(destination_base_dir, current_batch_subdir_name)<br><br>        <span class="hljs-comment"># 如果当前批次的子目录不存在，则创建它</span><br>        os.makedirs(current_batch_dir, exist_ok=<span class="hljs-literal">True</span>)<br>        <span class="hljs-comment"># --- 分批逻辑结束 ---</span><br><br>        <span class="hljs-comment"># 获取源文件路径和目标文件路径（指向批次子目录）</span><br>        source_path = found_file_paths[filename_to_copy]<br>        dest_path = os.path.join(current_batch_dir, filename_to_copy) <span class="hljs-comment"># 指向子目录</span><br><br>        <span class="hljs-comment"># 尝试复制文件</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  目标文件: <span class="hljs-subst">&#123;filename_to_copy&#125;</span>&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  归入批次: <span class="hljs-subst">&#123;current_batch_subdir_name&#125;</span>&quot;</span>)<br>            <span class="hljs-comment"># print(f&quot;  源路径: &#123;source_path&#125;&quot;) # 可取消注释以打印源路径</span><br>            <span class="hljs-comment"># print(f&quot;  目标路径: &#123;dest_path&#125;&quot;) # 可取消注释以打印目标路径</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  正在复制...&quot;</span>)<br>            shutil.copy2(source_path, dest_path) <span class="hljs-comment"># copy2 保留元数据</span><br>            files_copied_count += <span class="hljs-number">1</span> <span class="hljs-comment"># 只有成功复制后才增加计数器</span><br>            files_processed.add(filename_to_copy) <span class="hljs-comment"># 标记为已处理</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  成功复制 <span class="hljs-subst">&#123;filename_to_copy&#125;</span> 到 <span class="hljs-subst">&#123;current_batch_subdir_name&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  错误：复制文件 <span class="hljs-subst">&#123;filename_to_copy&#125;</span> 时出错: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>, file=sys.stderr)<br>            <span class="hljs-comment"># 如果复制失败，可以选择是否继续处理下一个文件，目前是继续</span><br><br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;在目录遍历或文件处理过程中发生严重错误: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>, file=sys.stderr)<br>  <br></code></pre></td></tr></table></figure><p>压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">zip -r 001.zip batch_001/<br><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> batch_???/; <span class="hljs-keyword">do</span> [ -d <span class="hljs-string">&quot;<span class="hljs-variable">$dir</span>&quot;</span> ] &amp;&amp; base=$(<span class="hljs-built_in">basename</span> <span class="hljs-string">&quot;<span class="hljs-variable">$dir</span>&quot;</span>) &amp;&amp; num=<span class="hljs-variable">$&#123;base#batch_&#125;</span> &amp;&amp; zip -r <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;num&#125;</span>.zip&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$dir</span>&quot;</span>; <span class="hljs-keyword">done</span><br><span class="hljs-comment">#请在包含所有 batch_XXX 文件夹的父目录下，直接运行上面这条单行命令。 它会自动查找所有 batch_XXX/ 目录，并为每一个目录执行正确的 zip -r XXX.zip batch_XXX/ 命令。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>bash</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>掌握 Markdown：从基础语法到 GitHub 博文轻松发布</title>
    <link href="/2025/05/07/blog_post/"/>
    <url>/2025/05/07/blog_post/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="掌握-Markdown：从基础语法到-GitHub-博文轻松发布"><a href="#掌握-Markdown：从基础语法到-GitHub-博文轻松发布" class="headerlink" title="掌握 Markdown：从基础语法到 GitHub 博文轻松发布"></a>掌握 Markdown：从基础语法到 GitHub 博文轻松发布</h1><p>在数字化写作日益普及的今天，掌握一种简洁高效的标记语言变得越来越重要。Markdown 因其轻量、易读易写的特性，受到了广大写作者和开发者的青睐。同时，GitHub 作为全球最大的代码托管平台，也为我们提供了便捷的博客发布功能。本文将带你全面了解 Markdown 的常用语法，并详细介绍如何将你的 Markdown 博文上传到 GitHub。</p><hr><h2 id="第一部分：Markdown-格式写作要求与举例"><a href="#第一部分：Markdown-格式写作要求与举例" class="headerlink" title="第一部分：Markdown 格式写作要求与举例"></a>第一部分：Markdown 格式写作要求与举例</h2><p>Markdown 的目标是实现「易读易写」。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。</p><p>以下是一些常用的 Markdown 语法：</p><h3 id="1-标题-Headers"><a href="#1-标题-Headers" class="headerlink" title="1. 标题 (Headers)"></a>1. 标题 (Headers)</h3><p>在文字前加上 <code>#</code> 号，可以创建标题。<code>#</code> 的数量决定了标题的级别，最多支持六级标题。</p><ul><li>示例：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 这是一级标题</span><br><span class="hljs-section">## 这是二级标题</span><br><span class="hljs-section">### 这是三级标题</span><br><span class="hljs-section">#### 这是四级标题</span><br><span class="hljs-section">##### 这是五级标题</span><br><span class="hljs-section">###### 这是六级标题</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-段落-Paragraphs"><a href="#2-段落-Paragraphs" class="headerlink" title="2. 段落 (Paragraphs)"></a>2. 段落 (Paragraphs)</h3><p>段落是最基本的文本单元。段落之间通过一个或多个空行来分隔。</p><ul><li>示例：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是一个段落。<br><br>这是另一个段落。<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-强调-Emphasis"><a href="#3-强调-Emphasis" class="headerlink" title="3. 强调 (Emphasis)"></a>3. 强调 (Emphasis)</h3><ul><li><p><strong>加粗 (Bold)</strong>：使用两个 <code>**</code> 或 <code>__</code> 包裹文字。</p></li><li><p><strong>斜体 (Italic)</strong>：使用一个 <code>*</code> 或 <code>_</code> 包裹文字。</p></li><li><p><strong>加粗并斜体 (Bold and Italic)</strong>：使用三个 <code>***</code> 或 <code>___</code> 包裹文字。</p></li><li><p>示例：</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**这是加粗的文字**</span><br><span class="hljs-strong">__这也是加粗的文字__</span><br><br><span class="hljs-emphasis">*这是斜体的文字*</span><br><span class="hljs-emphasis">_这也是斜体的文字_</span><br><br><span class="hljs-strong">**<span class="hljs-emphasis">*这是加粗并斜体的文字*</span>**</span><br><span class="hljs-strong">__<span class="hljs-emphasis">_这也是加粗并斜体的文字_</span>__</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="4-列表-Lists"><a href="#4-列表-Lists" class="headerlink" title="4. 列表 (Lists)"></a>4. 列表 (Lists)</h3><ul><li><p><strong>无序列表 (Unordered Lists)</strong>：使用 <code>*</code>、<code>+</code> 或 <code>-</code> 作为列表标记。</p></li><li><p><strong>有序列表 (Ordered Lists)</strong>：使用数字加英文句点 <code>.</code> 作为列表标记。</p></li><li><p>示例：</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 项目一<br><span class="hljs-bullet">*</span> 项目二<br><span class="hljs-bullet">*</span> 项目三<br><br><span class="hljs-bullet">-</span> 项目 A<br><span class="hljs-bullet">-</span> 项目 B<br><span class="hljs-bullet">-</span> 项目 C<br><br><span class="hljs-bullet">1.</span> 第一项<br><span class="hljs-bullet">2.</span> 第二项<br><span class="hljs-bullet">3.</span> 第三项<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-链接-Links"><a href="#5-链接-Links" class="headerlink" title="5. 链接 (Links)"></a>5. 链接 (Links)</h3><p>行内式链接：<code>[链接文字](链接地址)</code><br>参考式链接：在文末定义链接，然后在需要的地方引用。</p><ul><li>示例（行内式）：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">访问我的博客</span>](<span class="hljs-link">https://example.com</span>)<br>[<span class="hljs-string">访问我的博客并带有标题</span>](<span class="hljs-link">https://example.com &quot;博客标题&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="6-图片-Images"><a href="#6-图片-Images" class="headerlink" title="6. 图片 (Images)"></a>6. 图片 (Images)</h3><p>与链接类似，只是在前面多一个 <code>!</code>。<br>行内式图片：<code>![图片替代文字](图片链接)</code></p><ul><li>示例：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">谷歌 Logo</span>](<span class="hljs-link">https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="7-代码-Code"><a href="#7-代码-Code" class="headerlink" title="7. 代码 (Code)"></a>7. 代码 (Code)</h3><ul><li><p><strong>行内代码 (Inline Code)</strong>：使用反引号 <code>`</code> 包裹代码。</p></li><li><p><strong>代码块 (Code Blocks)</strong>：使用三个反引号 &#96;&#96;&#96; 包裹代码块，并可以指定语言类型。</p></li><li><p>示例：</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是一个行内代码的例子：<span class="hljs-code">`print(&quot;Hello, World!&quot;)`</span>。<br><br>这是一个 Python 代码块：<br><span class="hljs-code">```python</span><br><span class="hljs-code">def greet(name):</span><br><span class="hljs-code">    print(f&quot;Hello, &#123;name&#125;!&quot;)</span><br></code></pre></td></tr></table></figure><p>  这是一个 JavaScript 代码块：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br></code></pre></td></tr></table></figure>  <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>### <span class="hljs-number">8</span>. 引用 (Blockquotes)<br><br>在段落前加上 `&gt;` 符号。<br><br>* 示例：<br>    ```markdown<br>    &gt; 这是一段引用的文字。<br>    &gt;<br>    &gt; &gt; 嵌套引用也是可以的。<br></code></pre></td></tr></table></figure></li></ul><h3 id="9-分隔线-Horizontal-Rules"><a href="#9-分隔线-Horizontal-Rules" class="headerlink" title="9. 分隔线 (Horizontal Rules)"></a>9. 分隔线 (Horizontal Rules)</h3><p>使用三个或以上的 <code>*</code>、<code>-</code> 或 <code>_</code> 来创建分隔线，行内不能有其他字符。</p><ul><li>示例：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"><span class="hljs-strong">***</span></span><br><span class="hljs-strong"><span class="hljs-section">---</span></span><br><span class="hljs-strong"><span class="hljs-section">__<span class="hljs-emphasis">_</span></span></span><br></code></pre></td></tr></table></figure></li></ul><h3 id="10-表格-Tables-通常是-Markdown-扩展语法，GitHub-支持"><a href="#10-表格-Tables-通常是-Markdown-扩展语法，GitHub-支持" class="headerlink" title="10. 表格 (Tables) (通常是 Markdown 扩展语法，GitHub 支持)"></a>10. 表格 (Tables) (通常是 Markdown 扩展语法，GitHub 支持)</h3><p>使用 <code>|</code> 分隔单元格，使用 <code>-</code> 分隔表头和表内容，并可以使用 <code>:</code> 控制对齐方式。</p><ul><li>示例：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| 表头1 | 表头2 | 表头3 |<br>| :---- | :---: | ----: |<br>| 左对齐 | 居中对齐 | 右对齐 |<br>| 内容1 | 内容2 | 内容3 |<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="第二部分：GitHub-博文上传流程"><a href="#第二部分：GitHub-博文上传流程" class="headerlink" title="第二部分：GitHub 博文上传流程"></a>第二部分：GitHub 博文上传流程</h2><p>将 Markdown 博文上传到 GitHub 并通过 GitHub Pages 展示，通常有以下几种方式：</p><h3 id="方式一：直接在-GitHub-仓库中创建-上传文件"><a href="#方式一：直接在-GitHub-仓库中创建-上传文件" class="headerlink" title="方式一：直接在 GitHub 仓库中创建&#x2F;上传文件"></a>方式一：直接在 GitHub 仓库中创建&#x2F;上传文件</h3><p>这是最简单直接的方式，适合初学者。</p><ol><li><p><strong>创建&#x2F;选择仓库 (Repository)：</strong></p><ul><li><strong>新建仓库：</strong> 如果你还没有用于存放博客的仓库，可以新建一个。通常命名为 <code>&lt;username&gt;.github.io</code>（其中 <code>&lt;username&gt;</code> 是你的 GitHub 用户名），这样可以直接通过 <code>https://&lt;username&gt;.github.io</code> 访问。</li><li><strong>已有仓库：</strong> 如果你已经有仓库，可以直接使用。你可能需要在仓库的 <code>Settings</code> -&gt; <code>Pages</code> 中配置 GitHub Pages 的源。</li></ul></li><li><p><strong>创建&#x2F;上传 Markdown 文件：</strong></p><ul><li><strong>创建新文件：</strong> 在你的仓库中，点击 “Add file” -&gt; “Create new file”。</li><li><strong>命名文件：</strong> 给你的博文文件命名，通常以 <code>.md</code> 或 <code>.markdown</code> 作为后缀，例如 <code>my-first-post.md</code>。 你也可以创建文件夹来组织博文，例如 <code>_posts/YYYY-MM-DD-your-post-title.md</code> (Jekyll 格式，GitHub Pages 常用的静态站点生成器)。</li><li><strong>撰写内容：</strong> 在编辑器中粘贴或撰写你的 Markdown 内容。</li><li><strong>上传文件：</strong> 如果你已经在本地写好了 Markdown 文件，可以选择 “Add file” -&gt; “Upload files”，然后将文件拖拽或选择上传。</li></ul></li><li><p><strong>提交更改 (Commit changes)：</strong></p><ul><li>在页面下方，你会看到 “Commit new file” 或 “Commit changes” 的区域。</li><li>填写提交信息 (Commit message)，简要描述你这次的更改，例如 “Add my first blog post”。</li><li>选择提交到主分支 (通常是 <code>main</code> 或 <code>master</code>) 或创建一个新的分支进行提交 (推荐用于协作或复杂更改)。</li><li>点击 “Commit new file” 或 “Commit changes”。</li></ul></li><li><p><strong>查看博文 (如果使用 GitHub Pages)：</strong></p><ul><li>如果你使用的是 <code>&lt;username&gt;.github.io</code> 仓库，或者在其他仓库中正确配置了 GitHub Pages，稍等片刻 (GitHub Pages 需要一些时间来构建和部署)，你就可以通过相应的 URL 访问你的博文了。</li><li>例如：<code>https://&lt;username&gt;.github.io/my-first-post.html</code> (如果直接放在根目录) 或 <code>https://&lt;username&gt;.github.io/_posts/your-post-title.html</code> (如果使用 Jekyll 结构，链接格式可能因配置而异)。</li></ul></li></ol><h3 id="方式二：使用-Git-进行本地管理和推送"><a href="#方式二：使用-Git-进行本地管理和推送" class="headerlink" title="方式二：使用 Git 进行本地管理和推送"></a>方式二：使用 Git 进行本地管理和推送</h3><p>这种方式更专业，也更灵活，适合熟悉 Git 操作的用户。</p><ol><li><p><strong>安装 Git：</strong> 如果你本地还没有安装 Git，请先下载并安装。</p></li><li><p><strong>克隆仓库 (Clone Repository)：</strong></p><ul><li>打开你的终端或 Git Bash。</li><li>将你的 GitHub 仓库克隆到本地：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> [https://github.com/](https://github.com/)&lt;username&gt;/&lt;repository-name&gt;.git<br></code></pre></td></tr></table></figure>  例如：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> [https://github.com/yourusername/yourusername.github.io.git](https://github.com/yourusername/yourusername.github.io.git)<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>创建&#x2F;编辑 Markdown 文件：</strong></p><ul><li>在本地克隆下来的仓库文件夹中，创建或修改你的 Markdown 博文文件。你可以使用任何你喜欢的文本编辑器 (如 VS Code, Sublime Text, Typora 等)。</li></ul></li><li><p><strong>添加、提交和推送更改：</strong></p><ul><li>打开终端或 Git Bash，进入你的本地仓库目录。</li><li><strong>添加文件到暂存区：</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add your-post-file.md  <span class="hljs-comment"># 添加指定文件</span><br><span class="hljs-comment"># 或者</span><br>git add .  <span class="hljs-comment"># 添加所有更改的文件</span><br></code></pre></td></tr></table></figure></li><li><strong>提交更改到本地仓库：</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;Added new blog post: Your Post Title&quot;</span><br></code></pre></td></tr></table></figure></li><li><strong>推送到 GitHub 远程仓库：</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin main  <span class="hljs-comment"># 或者你的主分支名称，如 master</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>查看博文 (如果使用 GitHub Pages)：</strong></p><ul><li>同样，稍等片刻让 GitHub Pages 构建和部署，然后通过 URL 访问。</li></ul></li></ol><h3 id="方式三：使用静态站点生成器-如-Jekyll-Hugo-Hexo-等"><a href="#方式三：使用静态站点生成器-如-Jekyll-Hugo-Hexo-等" class="headerlink" title="方式三：使用静态站点生成器 (如 Jekyll, Hugo, Hexo 等)"></a>方式三：使用静态站点生成器 (如 Jekyll, Hugo, Hexo 等)</h3><p>这是更高级的方式，可以让你构建功能更丰富的博客，但学习曲线也相对陡峭一些。</p><ol><li><strong>选择并安装静态站点生成器：</strong> 例如 Jekyll (Ruby), Hugo (Go), Hexo (Node.js)。</li><li><strong>初始化项目：</strong> 根据所选生成器的文档初始化你的博客项目。</li><li><strong>创建 Markdown 博文：</strong> 通常在特定的目录 (如 <code>_posts</code>) 下创建 Markdown 文件。这些生成器通常有自己的文件命名和 Front Matter (文件头部元数据) 规范。</li><li><strong>本地预览：</strong> 大多数生成器都支持本地服务器，方便你实时预览效果。</li><li><strong>生成静态文件：</strong> 运行生成命令 (如 <code>jekyll build</code>, <code>hugo</code>, <code>hexo generate</code>)，将 Markdown 文件等转换为 HTML、CSS 和 JavaScript 文件。</li><li><strong>部署到 GitHub Pages：</strong><ul><li><strong>方法一：手动推送 <code>docs</code> 目录或 <code>gh-pages</code> 分支：</strong> 将生成器生成的静态文件目录 (通常是 <code>_site</code>, <code>public</code>, <code>docs</code> 等) 中的内容推送到你的 GitHub 仓库的 <code>main</code> 分支的 <code>/docs</code> 文件夹，或者一个名为 <code>gh-pages</code> 的分支，并在 GitHub Pages 设置中选择对应的源。</li><li><strong>方法二：使用 GitHub Actions 自动化部署：</strong> 这是推荐的方式，可以配置 GitHub Actions 在你推送到特定分支 (如 <code>main</code>) 时，自动运行构建命令并部署到 <code>gh-pages</code> 分支或发布到 GitHub Pages。</li></ul></li></ol><h3 id="一些-GitHub-Pages-的小提示："><a href="#一些-GitHub-Pages-的小提示：" class="headerlink" title="一些 GitHub Pages 的小提示："></a>一些 GitHub Pages 的小提示：</h3><ul><li><strong>默认主题：</strong> GitHub Pages 允许你选择一些预设的主题，可以在仓库的 <code>Settings</code> -&gt; <code>Pages</code> 中进行配置。</li><li><strong>自定义域名：</strong> 你可以将自己的域名指向你的 GitHub Pages 博客。</li><li><strong>Jekyll：</strong> GitHub Pages 对 Jekyll 有原生支持。如果你将 Markdown 文件按照 Jekyll 的规范组织 (例如在 <code>_posts</code> 目录下，文件名格式为 <code>YYYY-MM-DD-title.md</code>)，GitHub Pages 会自动为你构建网站。</li></ul><hr><h2 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h2><p>Markdown 以其简洁高效的特性，让内容创作回归本质。而 GitHub 则为我们提供了强大的平台来分享和展示我们的作品。希望通过本文的介绍，你能熟练掌握 Markdown 的基本语法，并顺利地在 GitHub 上发布你的博文。开始你的创作之旅吧！</p><hr><h2 id="使用建议："><a href="#使用建议：" class="headerlink" title="使用建议："></a>使用建议：</h2><ul><li><strong>实际操作：</strong> 最好在阅读时，自己动手尝试这些 Markdown 语法和 GitHub 上传流程。</li><li><strong>截图辅助：</strong> 在你的博文中，可以加入 GitHub 操作界面的截图，使流程更清晰易懂。</li><li><strong>个性化：</strong> 根据你的目标读者和个人风格，调整博文的语气和深度。</li><li><strong>举一反三：</strong> Markdown 的语法还有更多高级用法 (如任务列表、脚注、定义列表等)，可以鼓励读者进一步探索。</li></ul><p>我的<a href="https://github.com/xingdayup/xingdayup.github.io.git">GitHub仓库</a></p><h2 id="第三部分、我的博客的文章建立与上传"><a href="#第三部分、我的博客的文章建立与上传" class="headerlink" title="第三部分、我的博客的文章建立与上传"></a>第三部分、我的博客的文章建立与上传</h2><h3 id="创建一个新post"><a href="#创建一个新post" class="headerlink" title="创建一个新post"></a>创建一个新post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>写作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《小苏加油》</title>
    <link href="/2021/06/10/Su/"/>
    <url>/2021/06/10/Su/</url>
    
    <content type="html"><![CDATA[<p>苏苏苏苏苏苏苏苏苏</p><p><img src="/../image/Su/su.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Like</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
