<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>掌握 Markdown：从基础语法到 GitHub 博文轻松发布</title>
    <link href="/2025/05/07/%E6%8E%8C%E6%8F%A1%20Markdown%EF%BC%9A%E4%BB%8E%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%88%B0%20GitHub%20%E5%8D%9A%E6%96%87%E8%BD%BB%E6%9D%BE%E5%8F%91%E5%B8%83/"/>
    <url>/2025/05/07/%E6%8E%8C%E6%8F%A1%20Markdown%EF%BC%9A%E4%BB%8E%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%88%B0%20GitHub%20%E5%8D%9A%E6%96%87%E8%BD%BB%E6%9D%BE%E5%8F%91%E5%B8%83/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="掌握-Markdown：从基础语法到-GitHub-博文轻松发布"><a href="#掌握-Markdown：从基础语法到-GitHub-博文轻松发布" class="headerlink" title="掌握 Markdown：从基础语法到 GitHub 博文轻松发布"></a>掌握 Markdown：从基础语法到 GitHub 博文轻松发布</h1><p>在数字化写作日益普及的今天，掌握一种简洁高效的标记语言变得越来越重要。Markdown 因其轻量、易读易写的特性，受到了广大写作者和开发者的青睐。同时，GitHub 作为全球最大的代码托管平台，也为我们提供了便捷的博客发布功能。本文将带你全面了解 Markdown 的常用语法，并详细介绍如何将你的 Markdown 博文上传到 GitHub。</p><hr><h2 id="第一部分：Markdown-格式写作要求与举例"><a href="#第一部分：Markdown-格式写作要求与举例" class="headerlink" title="第一部分：Markdown 格式写作要求与举例"></a>第一部分：Markdown 格式写作要求与举例</h2><p>Markdown 的目标是实现「易读易写」。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。</p><p>以下是一些常用的 Markdown 语法：</p><h3 id="1-标题-Headers"><a href="#1-标题-Headers" class="headerlink" title="1. 标题 (Headers)"></a>1. 标题 (Headers)</h3><p>在文字前加上 <code>#</code> 号，可以创建标题。<code>#</code> 的数量决定了标题的级别，最多支持六级标题。</p><ul><li>示例：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 这是一级标题</span><br><span class="hljs-section">## 这是二级标题</span><br><span class="hljs-section">### 这是三级标题</span><br><span class="hljs-section">#### 这是四级标题</span><br><span class="hljs-section">##### 这是五级标题</span><br><span class="hljs-section">###### 这是六级标题</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-段落-Paragraphs"><a href="#2-段落-Paragraphs" class="headerlink" title="2. 段落 (Paragraphs)"></a>2. 段落 (Paragraphs)</h3><p>段落是最基本的文本单元。段落之间通过一个或多个空行来分隔。</p><ul><li>示例：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是一个段落。<br><br>这是另一个段落。<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-强调-Emphasis"><a href="#3-强调-Emphasis" class="headerlink" title="3. 强调 (Emphasis)"></a>3. 强调 (Emphasis)</h3><ul><li><p><strong>加粗 (Bold)</strong>：使用两个 <code>**</code> 或 <code>__</code> 包裹文字。</p></li><li><p><strong>斜体 (Italic)</strong>：使用一个 <code>*</code> 或 <code>_</code> 包裹文字。</p></li><li><p><strong>加粗并斜体 (Bold and Italic)</strong>：使用三个 <code>***</code> 或 <code>___</code> 包裹文字。</p></li><li><p>示例：</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**这是加粗的文字**</span><br><span class="hljs-strong">__这也是加粗的文字__</span><br><br><span class="hljs-emphasis">*这是斜体的文字*</span><br><span class="hljs-emphasis">_这也是斜体的文字_</span><br><br><span class="hljs-strong">**<span class="hljs-emphasis">*这是加粗并斜体的文字*</span>**</span><br><span class="hljs-strong">__<span class="hljs-emphasis">_这也是加粗并斜体的文字_</span>__</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="4-列表-Lists"><a href="#4-列表-Lists" class="headerlink" title="4. 列表 (Lists)"></a>4. 列表 (Lists)</h3><ul><li><p><strong>无序列表 (Unordered Lists)</strong>：使用 <code>*</code>、<code>+</code> 或 <code>-</code> 作为列表标记。</p></li><li><p><strong>有序列表 (Ordered Lists)</strong>：使用数字加英文句点 <code>.</code> 作为列表标记。</p></li><li><p>示例：</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 项目一<br><span class="hljs-bullet">*</span> 项目二<br><span class="hljs-bullet">*</span> 项目三<br><br><span class="hljs-bullet">-</span> 项目 A<br><span class="hljs-bullet">-</span> 项目 B<br><span class="hljs-bullet">-</span> 项目 C<br><br><span class="hljs-bullet">1.</span> 第一项<br><span class="hljs-bullet">2.</span> 第二项<br><span class="hljs-bullet">3.</span> 第三项<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-链接-Links"><a href="#5-链接-Links" class="headerlink" title="5. 链接 (Links)"></a>5. 链接 (Links)</h3><p>行内式链接：<code>[链接文字](链接地址)</code><br>参考式链接：在文末定义链接，然后在需要的地方引用。</p><ul><li>示例（行内式）：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">访问我的博客</span>](<span class="hljs-link">https://example.com</span>)<br>[<span class="hljs-string">访问我的博客并带有标题</span>](<span class="hljs-link">https://example.com &quot;博客标题&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="6-图片-Images"><a href="#6-图片-Images" class="headerlink" title="6. 图片 (Images)"></a>6. 图片 (Images)</h3><p>与链接类似，只是在前面多一个 <code>!</code>。<br>行内式图片：<code>![图片替代文字](图片链接)</code></p><ul><li>示例：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">谷歌 Logo</span>](<span class="hljs-link">https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="7-代码-Code"><a href="#7-代码-Code" class="headerlink" title="7. 代码 (Code)"></a>7. 代码 (Code)</h3><ul><li><p><strong>行内代码 (Inline Code)</strong>：使用反引号 <code>`</code> 包裹代码。</p></li><li><p><strong>代码块 (Code Blocks)</strong>：使用三个反引号 &#96;&#96;&#96; 包裹代码块，并可以指定语言类型。</p></li><li><p>示例：</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是一个行内代码的例子：<span class="hljs-code">`print(&quot;Hello, World!&quot;)`</span>。<br><br>这是一个 Python 代码块：<br><span class="hljs-code">```python</span><br><span class="hljs-code">def greet(name):</span><br><span class="hljs-code">    print(f&quot;Hello, &#123;name&#125;!&quot;)</span><br></code></pre></td></tr></table></figure><p>  这是一个 JavaScript 代码块：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br></code></pre></td></tr></table></figure>  <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>### <span class="hljs-number">8</span>. 引用 (Blockquotes)<br><br>在段落前加上 `&gt;` 符号。<br><br>* 示例：<br>    ```markdown<br>    &gt; 这是一段引用的文字。<br>    &gt;<br>    &gt; &gt; 嵌套引用也是可以的。<br></code></pre></td></tr></table></figure></li></ul><h3 id="9-分隔线-Horizontal-Rules"><a href="#9-分隔线-Horizontal-Rules" class="headerlink" title="9. 分隔线 (Horizontal Rules)"></a>9. 分隔线 (Horizontal Rules)</h3><p>使用三个或以上的 <code>*</code>、<code>-</code> 或 <code>_</code> 来创建分隔线，行内不能有其他字符。</p><ul><li>示例：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"><span class="hljs-strong">***</span></span><br><span class="hljs-strong"><span class="hljs-section">---</span></span><br><span class="hljs-strong"><span class="hljs-section">__<span class="hljs-emphasis">_</span></span></span><br></code></pre></td></tr></table></figure></li></ul><h3 id="10-表格-Tables-通常是-Markdown-扩展语法，GitHub-支持"><a href="#10-表格-Tables-通常是-Markdown-扩展语法，GitHub-支持" class="headerlink" title="10. 表格 (Tables) (通常是 Markdown 扩展语法，GitHub 支持)"></a>10. 表格 (Tables) (通常是 Markdown 扩展语法，GitHub 支持)</h3><p>使用 <code>|</code> 分隔单元格，使用 <code>-</code> 分隔表头和表内容，并可以使用 <code>:</code> 控制对齐方式。</p><ul><li>示例：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| 表头1 | 表头2 | 表头3 |<br>| :---- | :---: | ----: |<br>| 左对齐 | 居中对齐 | 右对齐 |<br>| 内容1 | 内容2 | 内容3 |<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="第二部分：GitHub-博文上传流程"><a href="#第二部分：GitHub-博文上传流程" class="headerlink" title="第二部分：GitHub 博文上传流程"></a>第二部分：GitHub 博文上传流程</h2><p>将 Markdown 博文上传到 GitHub 并通过 GitHub Pages 展示，通常有以下几种方式：</p><h3 id="方式一：直接在-GitHub-仓库中创建-上传文件"><a href="#方式一：直接在-GitHub-仓库中创建-上传文件" class="headerlink" title="方式一：直接在 GitHub 仓库中创建&#x2F;上传文件"></a>方式一：直接在 GitHub 仓库中创建&#x2F;上传文件</h3><p>这是最简单直接的方式，适合初学者。</p><ol><li><p><strong>创建&#x2F;选择仓库 (Repository)：</strong></p><ul><li><strong>新建仓库：</strong> 如果你还没有用于存放博客的仓库，可以新建一个。通常命名为 <code>&lt;username&gt;.github.io</code>（其中 <code>&lt;username&gt;</code> 是你的 GitHub 用户名），这样可以直接通过 <code>https://&lt;username&gt;.github.io</code> 访问。</li><li><strong>已有仓库：</strong> 如果你已经有仓库，可以直接使用。你可能需要在仓库的 <code>Settings</code> -&gt; <code>Pages</code> 中配置 GitHub Pages 的源。</li></ul></li><li><p><strong>创建&#x2F;上传 Markdown 文件：</strong></p><ul><li><strong>创建新文件：</strong> 在你的仓库中，点击 “Add file” -&gt; “Create new file”。</li><li><strong>命名文件：</strong> 给你的博文文件命名，通常以 <code>.md</code> 或 <code>.markdown</code> 作为后缀，例如 <code>my-first-post.md</code>。 你也可以创建文件夹来组织博文，例如 <code>_posts/YYYY-MM-DD-your-post-title.md</code> (Jekyll 格式，GitHub Pages 常用的静态站点生成器)。</li><li><strong>撰写内容：</strong> 在编辑器中粘贴或撰写你的 Markdown 内容。</li><li><strong>上传文件：</strong> 如果你已经在本地写好了 Markdown 文件，可以选择 “Add file” -&gt; “Upload files”，然后将文件拖拽或选择上传。</li></ul></li><li><p><strong>提交更改 (Commit changes)：</strong></p><ul><li>在页面下方，你会看到 “Commit new file” 或 “Commit changes” 的区域。</li><li>填写提交信息 (Commit message)，简要描述你这次的更改，例如 “Add my first blog post”。</li><li>选择提交到主分支 (通常是 <code>main</code> 或 <code>master</code>) 或创建一个新的分支进行提交 (推荐用于协作或复杂更改)。</li><li>点击 “Commit new file” 或 “Commit changes”。</li></ul></li><li><p><strong>查看博文 (如果使用 GitHub Pages)：</strong></p><ul><li>如果你使用的是 <code>&lt;username&gt;.github.io</code> 仓库，或者在其他仓库中正确配置了 GitHub Pages，稍等片刻 (GitHub Pages 需要一些时间来构建和部署)，你就可以通过相应的 URL 访问你的博文了。</li><li>例如：<code>https://&lt;username&gt;.github.io/my-first-post.html</code> (如果直接放在根目录) 或 <code>https://&lt;username&gt;.github.io/_posts/your-post-title.html</code> (如果使用 Jekyll 结构，链接格式可能因配置而异)。</li></ul></li></ol><h3 id="方式二：使用-Git-进行本地管理和推送"><a href="#方式二：使用-Git-进行本地管理和推送" class="headerlink" title="方式二：使用 Git 进行本地管理和推送"></a>方式二：使用 Git 进行本地管理和推送</h3><p>这种方式更专业，也更灵活，适合熟悉 Git 操作的用户。</p><ol><li><p><strong>安装 Git：</strong> 如果你本地还没有安装 Git，请先下载并安装。</p></li><li><p><strong>克隆仓库 (Clone Repository)：</strong></p><ul><li>打开你的终端或 Git Bash。</li><li>将你的 GitHub 仓库克隆到本地：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> [https://github.com/](https://github.com/)&lt;username&gt;/&lt;repository-name&gt;.git<br></code></pre></td></tr></table></figure>  例如：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> [https://github.com/yourusername/yourusername.github.io.git](https://github.com/yourusername/yourusername.github.io.git)<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>创建&#x2F;编辑 Markdown 文件：</strong></p><ul><li>在本地克隆下来的仓库文件夹中，创建或修改你的 Markdown 博文文件。你可以使用任何你喜欢的文本编辑器 (如 VS Code, Sublime Text, Typora 等)。</li></ul></li><li><p><strong>添加、提交和推送更改：</strong></p><ul><li>打开终端或 Git Bash，进入你的本地仓库目录。</li><li><strong>添加文件到暂存区：</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add your-post-file.md  <span class="hljs-comment"># 添加指定文件</span><br><span class="hljs-comment"># 或者</span><br>git add .  <span class="hljs-comment"># 添加所有更改的文件</span><br></code></pre></td></tr></table></figure></li><li><strong>提交更改到本地仓库：</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;Added new blog post: Your Post Title&quot;</span><br></code></pre></td></tr></table></figure></li><li><strong>推送到 GitHub 远程仓库：</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin main  <span class="hljs-comment"># 或者你的主分支名称，如 master</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>查看博文 (如果使用 GitHub Pages)：</strong></p><ul><li>同样，稍等片刻让 GitHub Pages 构建和部署，然后通过 URL 访问。</li></ul></li></ol><h3 id="方式三：使用静态站点生成器-如-Jekyll-Hugo-Hexo-等"><a href="#方式三：使用静态站点生成器-如-Jekyll-Hugo-Hexo-等" class="headerlink" title="方式三：使用静态站点生成器 (如 Jekyll, Hugo, Hexo 等)"></a>方式三：使用静态站点生成器 (如 Jekyll, Hugo, Hexo 等)</h3><p>这是更高级的方式，可以让你构建功能更丰富的博客，但学习曲线也相对陡峭一些。</p><ol><li><strong>选择并安装静态站点生成器：</strong> 例如 Jekyll (Ruby), Hugo (Go), Hexo (Node.js)。</li><li><strong>初始化项目：</strong> 根据所选生成器的文档初始化你的博客项目。</li><li><strong>创建 Markdown 博文：</strong> 通常在特定的目录 (如 <code>_posts</code>) 下创建 Markdown 文件。这些生成器通常有自己的文件命名和 Front Matter (文件头部元数据) 规范。</li><li><strong>本地预览：</strong> 大多数生成器都支持本地服务器，方便你实时预览效果。</li><li><strong>生成静态文件：</strong> 运行生成命令 (如 <code>jekyll build</code>, <code>hugo</code>, <code>hexo generate</code>)，将 Markdown 文件等转换为 HTML、CSS 和 JavaScript 文件。</li><li><strong>部署到 GitHub Pages：</strong><ul><li><strong>方法一：手动推送 <code>docs</code> 目录或 <code>gh-pages</code> 分支：</strong> 将生成器生成的静态文件目录 (通常是 <code>_site</code>, <code>public</code>, <code>docs</code> 等) 中的内容推送到你的 GitHub 仓库的 <code>main</code> 分支的 <code>/docs</code> 文件夹，或者一个名为 <code>gh-pages</code> 的分支，并在 GitHub Pages 设置中选择对应的源。</li><li><strong>方法二：使用 GitHub Actions 自动化部署：</strong> 这是推荐的方式，可以配置 GitHub Actions 在你推送到特定分支 (如 <code>main</code>) 时，自动运行构建命令并部署到 <code>gh-pages</code> 分支或发布到 GitHub Pages。</li></ul></li></ol><h3 id="一些-GitHub-Pages-的小提示："><a href="#一些-GitHub-Pages-的小提示：" class="headerlink" title="一些 GitHub Pages 的小提示："></a>一些 GitHub Pages 的小提示：</h3><ul><li><strong>默认主题：</strong> GitHub Pages 允许你选择一些预设的主题，可以在仓库的 <code>Settings</code> -&gt; <code>Pages</code> 中进行配置。</li><li><strong>自定义域名：</strong> 你可以将自己的域名指向你的 GitHub Pages 博客。</li><li><strong>Jekyll：</strong> GitHub Pages 对 Jekyll 有原生支持。如果你将 Markdown 文件按照 Jekyll 的规范组织 (例如在 <code>_posts</code> 目录下，文件名格式为 <code>YYYY-MM-DD-title.md</code>)，GitHub Pages 会自动为你构建网站。</li></ul><hr><h2 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h2><p>Markdown 以其简洁高效的特性，让内容创作回归本质。而 GitHub 则为我们提供了强大的平台来分享和展示我们的作品。希望通过本文的介绍，你能熟练掌握 Markdown 的基本语法，并顺利地在 GitHub 上发布你的博文。开始你的创作之旅吧！</p><hr><h2 id="使用建议："><a href="#使用建议：" class="headerlink" title="使用建议："></a>使用建议：</h2><ul><li><strong>实际操作：</strong> 最好在阅读时，自己动手尝试这些 Markdown 语法和 GitHub 上传流程。</li><li><strong>截图辅助：</strong> 在你的博文中，可以加入 GitHub 操作界面的截图，使流程更清晰易懂。</li><li><strong>个性化：</strong> 根据你的目标读者和个人风格，调整博文的语气和深度。</li><li><strong>举一反三：</strong> Markdown 的语法还有更多高级用法 (如任务列表、脚注、定义列表等)，可以鼓励读者进一步探索。</li></ul><p>我的<a href="https://github.com/xingdayup/xingdayup.github.io.git">GitHub仓库</a></p><h2 id="第三部分、我的博客的文章建立与上传"><a href="#第三部分、我的博客的文章建立与上传" class="headerlink" title="第三部分、我的博客的文章建立与上传"></a>第三部分、我的博客的文章建立与上传</h2><h3 id="创建一个新post"><a href="#创建一个新post" class="headerlink" title="创建一个新post"></a>创建一个新post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>写作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《小苏加油》</title>
    <link href="/2021/06/10/Su/"/>
    <url>/2021/06/10/Su/</url>
    
    <content type="html"><![CDATA[<p>水水水水水水水水水水水水水水</p><img src="Su/su.jpg" style="zoom:33%;" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
