<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>UKB数据提取</title>
    <link href="/2025/05/07/UKB%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96/"/>
    <url>/2025/05/07/UKB%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h2 id="UKB数据提取"><a href="#UKB数据提取" class="headerlink" title="UKB数据提取"></a>UKB数据提取</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@415d37a2c97b:/opt/notebooks# <span class="hljs-built_in">cd</span> /mnt<br>root@415d37a2c97b:/mnt# <span class="hljs-built_in">cd</span> project<br>root@415d37a2c97b:/mnt/project# <span class="hljs-built_in">cd</span> *TA<br>root@415d37a2c97b:/opt/notebooks# <span class="hljs-built_in">cd</span> /mnt<br>root@415d37a2c97b:/mnt# <span class="hljs-built_in">cd</span> project<br>root@415d37a2c97b:/mnt/project# <span class="hljs-built_in">cd</span> *TA<br>root@415d37a2c97b:/opt/notebooks# <span class="hljs-built_in">cd</span> /mnt<br>root@415d37a2c97b:/mnt# <span class="hljs-built_in">cd</span> project<br>root@415d37a2c97b:/mnt/project# <span class="hljs-built_in">cd</span> *TA<br>root@415d37a2c97b:/mnt/project/GMV_DATA# <span class="hljs-built_in">cp</span> *.csv /opt/notebooks<br>root@415d37a2c97b:/mnt/project/GMV_DATA# <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入所需的库</span><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd  <span class="hljs-comment"># 用于读取表格数据</span><br><span class="hljs-keyword">import</span> os            <span class="hljs-comment"># 用于操作系统功能，如文件路径操作、遍历目录</span><br><span class="hljs-keyword">import</span> shutil        <span class="hljs-comment"># 用于文件操作，如复制文件</span><br><span class="hljs-keyword">import</span> sys           <span class="hljs-comment"># 用于系统相关功能，如退出脚本、标准错误输出</span><br><span class="hljs-keyword">import</span> math          <span class="hljs-comment"># 用于数学运算（如此处不需要，但有时可能有用）</span><br><br><span class="hljs-comment"># --- 配置设定 ---</span><br><br><span class="hljs-comment"># 1. 包含参与者ID和目标文件名的表格文件的路径</span><br><span class="hljs-comment">#    (请更新为您的表格文件的正确路径和名称)</span><br>participant_table_path = <span class="hljs-string">&#x27;Participant_table.csv&#x27;</span><br><br><span class="hljs-comment"># 2. 表格中包含目标 T1 .zip 文件名的列的名称</span><br><span class="hljs-comment">#    (请从您的表格文件 image_4b5fe0.jpg 中获取确切的列标题)</span><br><span class="hljs-comment">#    *** 请务必用您表格中确切的列名称更新此变量！ ***</span><br>filename_column = <span class="hljs-string">&#x27;T1 structural brain images - NIFTI | Instance 2&#x27;</span><br><br><span class="hljs-comment"># 3. 存放 T1 .zip 文件的基础源目录 (文件在其中的子文件夹内)</span><br>source_base_dir = <span class="hljs-string">&#x27;/mnt/project/Bulk/Brain MRI/T1/&#x27;</span><br><br><span class="hljs-comment"># 4. 您希望将找到的 .zip 文件复制到的 **基础** 目标目录</span><br><span class="hljs-comment">#    脚本会在此目录下创建 batch_001, batch_002 ... 等子文件夹</span><br>destination_base_dir = <span class="hljs-string">&#x27;./T1_NIFTI_Batched&#x27;</span> <span class="hljs-comment"># 修改基础目标目录名</span><br><br><span class="hljs-comment"># 5. 每个批次子文件夹中最多存放的文件数量</span><br>batch_size = <span class="hljs-number">100</span><br><br><span class="hljs-comment"># 6. 您的参与者表格文件的分隔符 (CSV 通常用逗号 &#x27;,&#x27;, TSV 通常用制表符 &#x27;\t&#x27;)</span><br>file_delimiter=<span class="hljs-string">&#x27;,&#x27;</span>  <span class="hljs-comment"># 默认使用逗号</span><br><span class="hljs-comment"># file_delimiter=&#x27;\t&#x27; # 如果是制表符分隔，请取消本行注释并注释掉上面一行</span><br><span class="hljs-comment"># --- 配置结束 ---</span><br><span class="hljs-comment"># --- 脚本主要逻辑 ---</span><br><span class="hljs-comment"># 尝试创建基础目标目录，如果它不存在的话</span><br><span class="hljs-keyword">try</span>:<br>    os.makedirs(destination_base_dir, exist_ok=<span class="hljs-literal">True</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;基础目标目录已创建或已存在: <span class="hljs-subst">&#123;destination_base_dir&#125;</span>&quot;</span>)<br><span class="hljs-keyword">except</span> OSError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;错误：无法创建基础目标目录 <span class="hljs-subst">&#123;destination_base_dir&#125;</span>: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>, file=sys.stderr)<br>    sys.exit(<span class="hljs-number">1</span>) <span class="hljs-comment"># 退出脚本</span><br>    <br><span class="hljs-comment"># 读取参与者表格，获取目标 .zip 文件列表</span><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;正在读取参与者表格: <span class="hljs-subst">&#123;participant_table_path&#125;</span>&quot;</span>)<br>    df = pd.read_csv(participant_table_path, delimiter=file_delimiter, dtype=<span class="hljs-built_in">str</span>)<br>    <span class="hljs-keyword">if</span> filename_column <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> df.columns:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;错误: 在文件 <span class="hljs-subst">&#123;participant_table_path&#125;</span> 中未找到列 &#x27;<span class="hljs-subst">&#123;filename_column&#125;</span>&#x27;&quot;</span>, file=sys.stderr)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;文件中包含的列有: <span class="hljs-subst">&#123;<span class="hljs-built_in">list</span>(df.columns)&#125;</span>&quot;</span>, file=sys.stderr)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请检查并更新脚本中的 &#x27;filename_column&#x27; 变量。&quot;</span>, file=sys.stderr)<br>        sys.exit(<span class="hljs-number">1</span>)<br>    target_files = <span class="hljs-built_in">set</span>(df[filename_column].dropna().unique())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;从表格中找到 <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(target_files)&#125;</span> 个唯一的目标 .zip 文件名。&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> target_files:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;警告：在指定列中未找到任何目标文件名。请检查列名和文件内容。&quot;</span>)<br>        sys.exit(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">except</span> FileNotFoundError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;错误: 参与者表格文件未找到，路径: <span class="hljs-subst">&#123;participant_table_path&#125;</span>&quot;</span>, file=sys.stderr)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请检查并更新脚本中的 &#x27;participant_table_path&#x27; 变量。&quot;</span>, file=sys.stderr)<br>    sys.exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;错误：读取参与者表格 <span class="hljs-subst">&#123;participant_table_path&#125;</span> 时出错: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>, file=sys.stderr)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请检查您的文件分隔符 &#x27;<span class="hljs-subst">&#123;file_delimiter&#125;</span>&#x27; 是否设置正确。&quot;</span>, file=sys.stderr)<br>    sys.exit(<span class="hljs-number">1</span>)<br>    <br><span class="hljs-comment"># 用于跟踪已成功复制的文件数量，以确定批次</span><br>files_copied_count = <span class="hljs-number">0</span><br><span class="hljs-comment"># 用于存储在源目录中实际找到并已处理的目标文件名，防止重复处理</span><br>files_processed = <span class="hljs-built_in">set</span>()<br><br><span class="hljs-comment"># 遍历源基础目录及其所有子目录</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n正在搜索目标文件于: <span class="hljs-subst">&#123;source_base_dir&#125;</span> 及其子目录...&quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 为了让批次稍微稳定些（虽然不保证全局有序），可以先收集所有找到的文件路径</span><br>    found_file_paths = &#123;&#125; <span class="hljs-comment"># 存储找到的文件名及其完整路径</span><br>    <span class="hljs-keyword">for</span> root, dirs, files_in_current_dir <span class="hljs-keyword">in</span> os.walk(source_base_dir):<br>        <span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> files_in_current_dir:<br>            <span class="hljs-keyword">if</span> file_name <span class="hljs-keyword">in</span> target_files:<br>                <span class="hljs-comment"># 如果同一个文件名在不同地方找到，保留第一个找到的路径（或根据需要选择逻辑）</span><br>                <span class="hljs-keyword">if</span> file_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> found_file_paths:<br>                    found_file_paths[file_name] = os.path.join(root, file_name)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;在源目录中初步定位到 <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(found_file_paths)&#125;</span> 个目标文件。开始复制并分批...&quot;</span>)<br><br>    <span class="hljs-comment"># 按文件名排序（可选，为了让处理顺序更确定）</span><br>    sorted_target_files_found = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">list</span>(found_file_paths.keys()))<br><br>    <span class="hljs-comment"># 遍历找到的目标文件进行复制和分批</span><br>    <span class="hljs-keyword">for</span> filename_to_copy <span class="hljs-keyword">in</span> sorted_target_files_found:<br>        <span class="hljs-comment"># --- 分批逻辑开始 ---</span><br>        <span class="hljs-comment"># 计算当前文件应该属于哪个批次 (从 1 开始计数)</span><br>        <span class="hljs-comment"># 使用 files_copied_count 来决定批次号</span><br>        batch_index = (files_copied_count // batch_size) + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 构建当前批次的子目录名称 (例如 batch_001, batch_002)，使用 3 位补零</span><br>        current_batch_subdir_name = <span class="hljs-string">f&quot;batch_<span class="hljs-subst">&#123;batch_index:03d&#125;</span>&quot;</span><br>        <span class="hljs-comment"># 构建当前批次的完整目录路径</span><br>        current_batch_dir = os.path.join(destination_base_dir, current_batch_subdir_name)<br><br>        <span class="hljs-comment"># 如果当前批次的子目录不存在，则创建它</span><br>        os.makedirs(current_batch_dir, exist_ok=<span class="hljs-literal">True</span>)<br>        <span class="hljs-comment"># --- 分批逻辑结束 ---</span><br><br>        <span class="hljs-comment"># 获取源文件路径和目标文件路径（指向批次子目录）</span><br>        source_path = found_file_paths[filename_to_copy]<br>        dest_path = os.path.join(current_batch_dir, filename_to_copy) <span class="hljs-comment"># 指向子目录</span><br><br>        <span class="hljs-comment"># 尝试复制文件</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  目标文件: <span class="hljs-subst">&#123;filename_to_copy&#125;</span>&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  归入批次: <span class="hljs-subst">&#123;current_batch_subdir_name&#125;</span>&quot;</span>)<br>            <span class="hljs-comment"># print(f&quot;  源路径: &#123;source_path&#125;&quot;) # 可取消注释以打印源路径</span><br>            <span class="hljs-comment"># print(f&quot;  目标路径: &#123;dest_path&#125;&quot;) # 可取消注释以打印目标路径</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  正在复制...&quot;</span>)<br>            shutil.copy2(source_path, dest_path) <span class="hljs-comment"># copy2 保留元数据</span><br>            files_copied_count += <span class="hljs-number">1</span> <span class="hljs-comment"># 只有成功复制后才增加计数器</span><br>            files_processed.add(filename_to_copy) <span class="hljs-comment"># 标记为已处理</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  成功复制 <span class="hljs-subst">&#123;filename_to_copy&#125;</span> 到 <span class="hljs-subst">&#123;current_batch_subdir_name&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  错误：复制文件 <span class="hljs-subst">&#123;filename_to_copy&#125;</span> 时出错: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>, file=sys.stderr)<br>            <span class="hljs-comment"># 如果复制失败，可以选择是否继续处理下一个文件，目前是继续</span><br><br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;在目录遍历或文件处理过程中发生严重错误: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>, file=sys.stderr)<br>  <br></code></pre></td></tr></table></figure><p>压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">zip -r 001.zip batch_001/<br><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> batch_???/; <span class="hljs-keyword">do</span> [ -d <span class="hljs-string">&quot;<span class="hljs-variable">$dir</span>&quot;</span> ] &amp;&amp; base=$(<span class="hljs-built_in">basename</span> <span class="hljs-string">&quot;<span class="hljs-variable">$dir</span>&quot;</span>) &amp;&amp; num=<span class="hljs-variable">$&#123;base#batch_&#125;</span> &amp;&amp; zip -r <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;num&#125;</span>.zip&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$dir</span>&quot;</span>; <span class="hljs-keyword">done</span><br><span class="hljs-comment">#请在包含所有 batch_XXX 文件夹的父目录下，直接运行上面这条单行命令。 它会自动查找所有 batch_XXX/ 目录，并为每一个目录执行正确的 zip -r XXX.zip batch_XXX/ 命令。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>bash</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片上传</title>
    <link href="/2025/05/07/img/"/>
    <url>/2025/05/07/img/</url>
    
    <content type="html"><![CDATA[<p>r呃呃呃呃</p><p><img src="/img/mm_facetoface_collect_qrcode_1725002504325.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>掌握 Markdown：从基础语法到 GitHub 博文轻松发布</title>
    <link href="/2025/05/07/%E6%8E%8C%E6%8F%A1%20Markdown%EF%BC%9A%E4%BB%8E%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%88%B0%20GitHub%20%E5%8D%9A%E6%96%87%E8%BD%BB%E6%9D%BE%E5%8F%91%E5%B8%83/"/>
    <url>/2025/05/07/%E6%8E%8C%E6%8F%A1%20Markdown%EF%BC%9A%E4%BB%8E%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%88%B0%20GitHub%20%E5%8D%9A%E6%96%87%E8%BD%BB%E6%9D%BE%E5%8F%91%E5%B8%83/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="掌握-Markdown：从基础语法到-GitHub-博文轻松发布"><a href="#掌握-Markdown：从基础语法到-GitHub-博文轻松发布" class="headerlink" title="掌握 Markdown：从基础语法到 GitHub 博文轻松发布"></a>掌握 Markdown：从基础语法到 GitHub 博文轻松发布</h1><p>在数字化写作日益普及的今天，掌握一种简洁高效的标记语言变得越来越重要。Markdown 因其轻量、易读易写的特性，受到了广大写作者和开发者的青睐。同时，GitHub 作为全球最大的代码托管平台，也为我们提供了便捷的博客发布功能。本文将带你全面了解 Markdown 的常用语法，并详细介绍如何将你的 Markdown 博文上传到 GitHub。</p><hr><h2 id="第一部分：Markdown-格式写作要求与举例"><a href="#第一部分：Markdown-格式写作要求与举例" class="headerlink" title="第一部分：Markdown 格式写作要求与举例"></a>第一部分：Markdown 格式写作要求与举例</h2><p>Markdown 的目标是实现「易读易写」。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。</p><p>以下是一些常用的 Markdown 语法：</p><h3 id="1-标题-Headers"><a href="#1-标题-Headers" class="headerlink" title="1. 标题 (Headers)"></a>1. 标题 (Headers)</h3><p>在文字前加上 <code>#</code> 号，可以创建标题。<code>#</code> 的数量决定了标题的级别，最多支持六级标题。</p><ul><li>示例：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 这是一级标题</span><br><span class="hljs-section">## 这是二级标题</span><br><span class="hljs-section">### 这是三级标题</span><br><span class="hljs-section">#### 这是四级标题</span><br><span class="hljs-section">##### 这是五级标题</span><br><span class="hljs-section">###### 这是六级标题</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-段落-Paragraphs"><a href="#2-段落-Paragraphs" class="headerlink" title="2. 段落 (Paragraphs)"></a>2. 段落 (Paragraphs)</h3><p>段落是最基本的文本单元。段落之间通过一个或多个空行来分隔。</p><ul><li>示例：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是一个段落。<br><br>这是另一个段落。<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-强调-Emphasis"><a href="#3-强调-Emphasis" class="headerlink" title="3. 强调 (Emphasis)"></a>3. 强调 (Emphasis)</h3><ul><li><p><strong>加粗 (Bold)</strong>：使用两个 <code>**</code> 或 <code>__</code> 包裹文字。</p></li><li><p><strong>斜体 (Italic)</strong>：使用一个 <code>*</code> 或 <code>_</code> 包裹文字。</p></li><li><p><strong>加粗并斜体 (Bold and Italic)</strong>：使用三个 <code>***</code> 或 <code>___</code> 包裹文字。</p></li><li><p>示例：</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**这是加粗的文字**</span><br><span class="hljs-strong">__这也是加粗的文字__</span><br><br><span class="hljs-emphasis">*这是斜体的文字*</span><br><span class="hljs-emphasis">_这也是斜体的文字_</span><br><br><span class="hljs-strong">**<span class="hljs-emphasis">*这是加粗并斜体的文字*</span>**</span><br><span class="hljs-strong">__<span class="hljs-emphasis">_这也是加粗并斜体的文字_</span>__</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="4-列表-Lists"><a href="#4-列表-Lists" class="headerlink" title="4. 列表 (Lists)"></a>4. 列表 (Lists)</h3><ul><li><p><strong>无序列表 (Unordered Lists)</strong>：使用 <code>*</code>、<code>+</code> 或 <code>-</code> 作为列表标记。</p></li><li><p><strong>有序列表 (Ordered Lists)</strong>：使用数字加英文句点 <code>.</code> 作为列表标记。</p></li><li><p>示例：</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 项目一<br><span class="hljs-bullet">*</span> 项目二<br><span class="hljs-bullet">*</span> 项目三<br><br><span class="hljs-bullet">-</span> 项目 A<br><span class="hljs-bullet">-</span> 项目 B<br><span class="hljs-bullet">-</span> 项目 C<br><br><span class="hljs-bullet">1.</span> 第一项<br><span class="hljs-bullet">2.</span> 第二项<br><span class="hljs-bullet">3.</span> 第三项<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-链接-Links"><a href="#5-链接-Links" class="headerlink" title="5. 链接 (Links)"></a>5. 链接 (Links)</h3><p>行内式链接：<code>[链接文字](链接地址)</code><br>参考式链接：在文末定义链接，然后在需要的地方引用。</p><ul><li>示例（行内式）：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">访问我的博客</span>](<span class="hljs-link">https://example.com</span>)<br>[<span class="hljs-string">访问我的博客并带有标题</span>](<span class="hljs-link">https://example.com &quot;博客标题&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="6-图片-Images"><a href="#6-图片-Images" class="headerlink" title="6. 图片 (Images)"></a>6. 图片 (Images)</h3><p>与链接类似，只是在前面多一个 <code>!</code>。<br>行内式图片：<code>![图片替代文字](图片链接)</code></p><ul><li>示例：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">谷歌 Logo</span>](<span class="hljs-link">https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="7-代码-Code"><a href="#7-代码-Code" class="headerlink" title="7. 代码 (Code)"></a>7. 代码 (Code)</h3><ul><li><p><strong>行内代码 (Inline Code)</strong>：使用反引号 <code>`</code> 包裹代码。</p></li><li><p><strong>代码块 (Code Blocks)</strong>：使用三个反引号 &#96;&#96;&#96; 包裹代码块，并可以指定语言类型。</p></li><li><p>示例：</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是一个行内代码的例子：<span class="hljs-code">`print(&quot;Hello, World!&quot;)`</span>。<br><br>这是一个 Python 代码块：<br><span class="hljs-code">```python</span><br><span class="hljs-code">def greet(name):</span><br><span class="hljs-code">    print(f&quot;Hello, &#123;name&#125;!&quot;)</span><br></code></pre></td></tr></table></figure><p>  这是一个 JavaScript 代码块：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br></code></pre></td></tr></table></figure>  <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>### <span class="hljs-number">8</span>. 引用 (Blockquotes)<br><br>在段落前加上 `&gt;` 符号。<br><br>* 示例：<br>    ```markdown<br>    &gt; 这是一段引用的文字。<br>    &gt;<br>    &gt; &gt; 嵌套引用也是可以的。<br></code></pre></td></tr></table></figure></li></ul><h3 id="9-分隔线-Horizontal-Rules"><a href="#9-分隔线-Horizontal-Rules" class="headerlink" title="9. 分隔线 (Horizontal Rules)"></a>9. 分隔线 (Horizontal Rules)</h3><p>使用三个或以上的 <code>*</code>、<code>-</code> 或 <code>_</code> 来创建分隔线，行内不能有其他字符。</p><ul><li>示例：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"><span class="hljs-strong">***</span></span><br><span class="hljs-strong"><span class="hljs-section">---</span></span><br><span class="hljs-strong"><span class="hljs-section">__<span class="hljs-emphasis">_</span></span></span><br></code></pre></td></tr></table></figure></li></ul><h3 id="10-表格-Tables-通常是-Markdown-扩展语法，GitHub-支持"><a href="#10-表格-Tables-通常是-Markdown-扩展语法，GitHub-支持" class="headerlink" title="10. 表格 (Tables) (通常是 Markdown 扩展语法，GitHub 支持)"></a>10. 表格 (Tables) (通常是 Markdown 扩展语法，GitHub 支持)</h3><p>使用 <code>|</code> 分隔单元格，使用 <code>-</code> 分隔表头和表内容，并可以使用 <code>:</code> 控制对齐方式。</p><ul><li>示例：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| 表头1 | 表头2 | 表头3 |<br>| :---- | :---: | ----: |<br>| 左对齐 | 居中对齐 | 右对齐 |<br>| 内容1 | 内容2 | 内容3 |<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="第二部分：GitHub-博文上传流程"><a href="#第二部分：GitHub-博文上传流程" class="headerlink" title="第二部分：GitHub 博文上传流程"></a>第二部分：GitHub 博文上传流程</h2><p>将 Markdown 博文上传到 GitHub 并通过 GitHub Pages 展示，通常有以下几种方式：</p><h3 id="方式一：直接在-GitHub-仓库中创建-上传文件"><a href="#方式一：直接在-GitHub-仓库中创建-上传文件" class="headerlink" title="方式一：直接在 GitHub 仓库中创建&#x2F;上传文件"></a>方式一：直接在 GitHub 仓库中创建&#x2F;上传文件</h3><p>这是最简单直接的方式，适合初学者。</p><ol><li><p><strong>创建&#x2F;选择仓库 (Repository)：</strong></p><ul><li><strong>新建仓库：</strong> 如果你还没有用于存放博客的仓库，可以新建一个。通常命名为 <code>&lt;username&gt;.github.io</code>（其中 <code>&lt;username&gt;</code> 是你的 GitHub 用户名），这样可以直接通过 <code>https://&lt;username&gt;.github.io</code> 访问。</li><li><strong>已有仓库：</strong> 如果你已经有仓库，可以直接使用。你可能需要在仓库的 <code>Settings</code> -&gt; <code>Pages</code> 中配置 GitHub Pages 的源。</li></ul></li><li><p><strong>创建&#x2F;上传 Markdown 文件：</strong></p><ul><li><strong>创建新文件：</strong> 在你的仓库中，点击 “Add file” -&gt; “Create new file”。</li><li><strong>命名文件：</strong> 给你的博文文件命名，通常以 <code>.md</code> 或 <code>.markdown</code> 作为后缀，例如 <code>my-first-post.md</code>。 你也可以创建文件夹来组织博文，例如 <code>_posts/YYYY-MM-DD-your-post-title.md</code> (Jekyll 格式，GitHub Pages 常用的静态站点生成器)。</li><li><strong>撰写内容：</strong> 在编辑器中粘贴或撰写你的 Markdown 内容。</li><li><strong>上传文件：</strong> 如果你已经在本地写好了 Markdown 文件，可以选择 “Add file” -&gt; “Upload files”，然后将文件拖拽或选择上传。</li></ul></li><li><p><strong>提交更改 (Commit changes)：</strong></p><ul><li>在页面下方，你会看到 “Commit new file” 或 “Commit changes” 的区域。</li><li>填写提交信息 (Commit message)，简要描述你这次的更改，例如 “Add my first blog post”。</li><li>选择提交到主分支 (通常是 <code>main</code> 或 <code>master</code>) 或创建一个新的分支进行提交 (推荐用于协作或复杂更改)。</li><li>点击 “Commit new file” 或 “Commit changes”。</li></ul></li><li><p><strong>查看博文 (如果使用 GitHub Pages)：</strong></p><ul><li>如果你使用的是 <code>&lt;username&gt;.github.io</code> 仓库，或者在其他仓库中正确配置了 GitHub Pages，稍等片刻 (GitHub Pages 需要一些时间来构建和部署)，你就可以通过相应的 URL 访问你的博文了。</li><li>例如：<code>https://&lt;username&gt;.github.io/my-first-post.html</code> (如果直接放在根目录) 或 <code>https://&lt;username&gt;.github.io/_posts/your-post-title.html</code> (如果使用 Jekyll 结构，链接格式可能因配置而异)。</li></ul></li></ol><h3 id="方式二：使用-Git-进行本地管理和推送"><a href="#方式二：使用-Git-进行本地管理和推送" class="headerlink" title="方式二：使用 Git 进行本地管理和推送"></a>方式二：使用 Git 进行本地管理和推送</h3><p>这种方式更专业，也更灵活，适合熟悉 Git 操作的用户。</p><ol><li><p><strong>安装 Git：</strong> 如果你本地还没有安装 Git，请先下载并安装。</p></li><li><p><strong>克隆仓库 (Clone Repository)：</strong></p><ul><li>打开你的终端或 Git Bash。</li><li>将你的 GitHub 仓库克隆到本地：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> [https://github.com/](https://github.com/)&lt;username&gt;/&lt;repository-name&gt;.git<br></code></pre></td></tr></table></figure>  例如：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> [https://github.com/yourusername/yourusername.github.io.git](https://github.com/yourusername/yourusername.github.io.git)<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>创建&#x2F;编辑 Markdown 文件：</strong></p><ul><li>在本地克隆下来的仓库文件夹中，创建或修改你的 Markdown 博文文件。你可以使用任何你喜欢的文本编辑器 (如 VS Code, Sublime Text, Typora 等)。</li></ul></li><li><p><strong>添加、提交和推送更改：</strong></p><ul><li>打开终端或 Git Bash，进入你的本地仓库目录。</li><li><strong>添加文件到暂存区：</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add your-post-file.md  <span class="hljs-comment"># 添加指定文件</span><br><span class="hljs-comment"># 或者</span><br>git add .  <span class="hljs-comment"># 添加所有更改的文件</span><br></code></pre></td></tr></table></figure></li><li><strong>提交更改到本地仓库：</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;Added new blog post: Your Post Title&quot;</span><br></code></pre></td></tr></table></figure></li><li><strong>推送到 GitHub 远程仓库：</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin main  <span class="hljs-comment"># 或者你的主分支名称，如 master</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>查看博文 (如果使用 GitHub Pages)：</strong></p><ul><li>同样，稍等片刻让 GitHub Pages 构建和部署，然后通过 URL 访问。</li></ul></li></ol><h3 id="方式三：使用静态站点生成器-如-Jekyll-Hugo-Hexo-等"><a href="#方式三：使用静态站点生成器-如-Jekyll-Hugo-Hexo-等" class="headerlink" title="方式三：使用静态站点生成器 (如 Jekyll, Hugo, Hexo 等)"></a>方式三：使用静态站点生成器 (如 Jekyll, Hugo, Hexo 等)</h3><p>这是更高级的方式，可以让你构建功能更丰富的博客，但学习曲线也相对陡峭一些。</p><ol><li><strong>选择并安装静态站点生成器：</strong> 例如 Jekyll (Ruby), Hugo (Go), Hexo (Node.js)。</li><li><strong>初始化项目：</strong> 根据所选生成器的文档初始化你的博客项目。</li><li><strong>创建 Markdown 博文：</strong> 通常在特定的目录 (如 <code>_posts</code>) 下创建 Markdown 文件。这些生成器通常有自己的文件命名和 Front Matter (文件头部元数据) 规范。</li><li><strong>本地预览：</strong> 大多数生成器都支持本地服务器，方便你实时预览效果。</li><li><strong>生成静态文件：</strong> 运行生成命令 (如 <code>jekyll build</code>, <code>hugo</code>, <code>hexo generate</code>)，将 Markdown 文件等转换为 HTML、CSS 和 JavaScript 文件。</li><li><strong>部署到 GitHub Pages：</strong><ul><li><strong>方法一：手动推送 <code>docs</code> 目录或 <code>gh-pages</code> 分支：</strong> 将生成器生成的静态文件目录 (通常是 <code>_site</code>, <code>public</code>, <code>docs</code> 等) 中的内容推送到你的 GitHub 仓库的 <code>main</code> 分支的 <code>/docs</code> 文件夹，或者一个名为 <code>gh-pages</code> 的分支，并在 GitHub Pages 设置中选择对应的源。</li><li><strong>方法二：使用 GitHub Actions 自动化部署：</strong> 这是推荐的方式，可以配置 GitHub Actions 在你推送到特定分支 (如 <code>main</code>) 时，自动运行构建命令并部署到 <code>gh-pages</code> 分支或发布到 GitHub Pages。</li></ul></li></ol><h3 id="一些-GitHub-Pages-的小提示："><a href="#一些-GitHub-Pages-的小提示：" class="headerlink" title="一些 GitHub Pages 的小提示："></a>一些 GitHub Pages 的小提示：</h3><ul><li><strong>默认主题：</strong> GitHub Pages 允许你选择一些预设的主题，可以在仓库的 <code>Settings</code> -&gt; <code>Pages</code> 中进行配置。</li><li><strong>自定义域名：</strong> 你可以将自己的域名指向你的 GitHub Pages 博客。</li><li><strong>Jekyll：</strong> GitHub Pages 对 Jekyll 有原生支持。如果你将 Markdown 文件按照 Jekyll 的规范组织 (例如在 <code>_posts</code> 目录下，文件名格式为 <code>YYYY-MM-DD-title.md</code>)，GitHub Pages 会自动为你构建网站。</li></ul><hr><h2 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h2><p>Markdown 以其简洁高效的特性，让内容创作回归本质。而 GitHub 则为我们提供了强大的平台来分享和展示我们的作品。希望通过本文的介绍，你能熟练掌握 Markdown 的基本语法，并顺利地在 GitHub 上发布你的博文。开始你的创作之旅吧！</p><hr><h2 id="使用建议："><a href="#使用建议：" class="headerlink" title="使用建议："></a>使用建议：</h2><ul><li><strong>实际操作：</strong> 最好在阅读时，自己动手尝试这些 Markdown 语法和 GitHub 上传流程。</li><li><strong>截图辅助：</strong> 在你的博文中，可以加入 GitHub 操作界面的截图，使流程更清晰易懂。</li><li><strong>个性化：</strong> 根据你的目标读者和个人风格，调整博文的语气和深度。</li><li><strong>举一反三：</strong> Markdown 的语法还有更多高级用法 (如任务列表、脚注、定义列表等)，可以鼓励读者进一步探索。</li></ul><p>我的<a href="https://github.com/xingdayup/xingdayup.github.io.git">GitHub仓库</a></p><h2 id="第三部分、我的博客的文章建立与上传"><a href="#第三部分、我的博客的文章建立与上传" class="headerlink" title="第三部分、我的博客的文章建立与上传"></a>第三部分、我的博客的文章建立与上传</h2><h3 id="创建一个新post"><a href="#创建一个新post" class="headerlink" title="创建一个新post"></a>创建一个新post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>写作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《小苏加油》</title>
    <link href="/2021/06/10/Su/"/>
    <url>/2021/06/10/Su/</url>
    
    <content type="html"><![CDATA[<p>水水水水水水水水水水水水水水</p><img src="Su/su.jpg" style="zoom:33%;" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
